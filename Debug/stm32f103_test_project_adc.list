
stm32f103_test_project_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  0800362c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800362c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009776  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef1  00000000  00000000  0002980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc5  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a9  00000000  00000000  0004444d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087895  00000000  00000000  0004faf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d738b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000d73e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003518 	.word	0x08003518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003518 	.word	0x08003518

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b5d      	ldr	r3, [pc, #372]	; (80002d4 <MX_ADC1_Init+0x188>)
 800015e:	4a5e      	ldr	r2, [pc, #376]	; (80002d8 <MX_ADC1_Init+0x18c>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b5c      	ldr	r3, [pc, #368]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b5a      	ldr	r3, [pc, #360]	; (80002d4 <MX_ADC1_Init+0x188>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b58      	ldr	r3, [pc, #352]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b57      	ldr	r3, [pc, #348]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b55      	ldr	r3, [pc, #340]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 11;
 8000184:	4b53      	ldr	r3, [pc, #332]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000186:	220b      	movs	r2, #11
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4852      	ldr	r0, [pc, #328]	; (80002d4 <MX_ADC1_Init+0x188>)
 800018c:	f000 fd66 	bl	8000c5c <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fb95 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a2:	2307      	movs	r3, #7
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	484a      	ldr	r0, [pc, #296]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001ac:	f001 f8ee 	bl	800138c <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fb85 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4843      	ldr	r0, [pc, #268]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001c8:	f001 f8e0 	bl	800138c <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fb77 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d6:	2302      	movs	r3, #2
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	483c      	ldr	r0, [pc, #240]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001e4:	f001 f8d2 	bl	800138c <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fb69 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4835      	ldr	r0, [pc, #212]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000200:	f001 f8c4 	bl	800138c <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 fb5b 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000212:	2305      	movs	r3, #5
 8000214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	482e      	ldr	r0, [pc, #184]	; (80002d4 <MX_ADC1_Init+0x188>)
 800021c:	f001 f8b6 	bl	800138c <HAL_ADC_ConfigChannel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000226:	f000 fb4d 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800022a:	2305      	movs	r3, #5
 800022c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800022e:	2306      	movs	r3, #6
 8000230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4827      	ldr	r0, [pc, #156]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000238:	f001 f8a8 	bl	800138c <HAL_ADC_ConfigChannel>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000242:	f000 fb3f 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000246:	2306      	movs	r3, #6
 8000248:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800024a:	2307      	movs	r3, #7
 800024c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4619      	mov	r1, r3
 8000252:	4820      	ldr	r0, [pc, #128]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000254:	f001 f89a 	bl	800138c <HAL_ADC_ConfigChannel>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800025e:	f000 fb31 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000262:	2307      	movs	r3, #7
 8000264:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000266:	2308      	movs	r3, #8
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4819      	ldr	r0, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000270:	f001 f88c 	bl	800138c <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800027a:	f000 fb23 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800027e:	2309      	movs	r3, #9
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000282:	2309      	movs	r3, #9
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	4812      	ldr	r0, [pc, #72]	; (80002d4 <MX_ADC1_Init+0x188>)
 800028c:	f001 f87e 	bl	800138c <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000296:	f000 fb15 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800029a:	230a      	movs	r3, #10
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	480c      	ldr	r0, [pc, #48]	; (80002d4 <MX_ADC1_Init+0x188>)
 80002a4:	f001 f872 	bl	800138c <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80002ae:	f000 fb09 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80002b2:	230b      	movs	r3, #11
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC1_Init+0x188>)
 80002bc:	f001 f866 	bl	800138c <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 80002c6:	f000 fafd 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000fc 	.word	0x200000fc
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_ADC2_Init+0xb0>)
 80002ee:	4a28      	ldr	r2, [pc, #160]	; (8000390 <MX_ADC2_Init+0xb4>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <MX_ADC2_Init+0xb0>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_ADC2_Init+0xb0>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <MX_ADC2_Init+0xb0>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_ADC2_Init+0xb0>)
 8000308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <MX_ADC2_Init+0xb0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MX_ADC2_Init+0xb0>)
 8000316:	2203      	movs	r2, #3
 8000318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800031a:	481c      	ldr	r0, [pc, #112]	; (800038c <MX_ADC2_Init+0xb0>)
 800031c:	f000 fc9e 	bl	8000c5c <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000326:	f000 facd 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800032a:	2306      	movs	r3, #6
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000332:	2307      	movs	r3, #7
 8000334:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <MX_ADC2_Init+0xb0>)
 800033c:	f001 f826 	bl	800138c <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 fabd 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800034a:	2308      	movs	r3, #8
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034e:	2302      	movs	r3, #2
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <MX_ADC2_Init+0xb0>)
 8000358:	f001 f818 	bl	800138c <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000362:	f000 faaf 	bl	80008c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000366:	2306      	movs	r3, #6
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800036a:	2303      	movs	r3, #3
 800036c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_ADC2_Init+0xb0>)
 8000374:	f001 f80a 	bl	800138c <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 faa1 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000cc 	.word	0x200000cc
 8000390:	40012800 	.word	0x40012800

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0320 	add.w	r3, r7, #32
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a46      	ldr	r2, [pc, #280]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d140      	bne.n	8000436 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003b4:	4b45      	ldr	r3, [pc, #276]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a44      	ldr	r2, [pc, #272]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b42      	ldr	r3, [pc, #264]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c8:	61fb      	str	r3, [r7, #28]
 80003ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	61bb      	str	r3, [r7, #24]
 80003e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b39      	ldr	r3, [pc, #228]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a38      	ldr	r2, [pc, #224]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697b      	ldr	r3, [r7, #20]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003fc:	23ff      	movs	r3, #255	; 0xff
 80003fe:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	2303      	movs	r3, #3
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	4619      	mov	r1, r3
 800040a:	4831      	ldr	r0, [pc, #196]	; (80004d0 <HAL_ADC_MspInit+0x13c>)
 800040c:	f001 fb16 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000410:	2302      	movs	r3, #2
 8000412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000414:	2303      	movs	r3, #3
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	4619      	mov	r1, r3
 800041e:	482d      	ldr	r0, [pc, #180]	; (80004d4 <HAL_ADC_MspInit+0x140>)
 8000420:	f001 fb0c 	bl	8001a3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2100      	movs	r1, #0
 8000428:	2012      	movs	r0, #18
 800042a:	f001 fad0 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800042e:	2012      	movs	r0, #18
 8000430:	f001 fae9 	bl	8001a06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000434:	e044      	b.n	80004c0 <HAL_ADC_MspInit+0x12c>
  else if(adcHandle->Instance==ADC2)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <HAL_ADC_MspInit+0x144>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d13f      	bne.n	80004c0 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a15      	ldr	r2, [pc, #84]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048c:	2303      	movs	r3, #3
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0320 	add.w	r3, r7, #32
 8000494:	4619      	mov	r1, r3
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <HAL_ADC_MspInit+0x13c>)
 8000498:	f001 fad0 	bl	8001a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0320 	add.w	r3, r7, #32
 80004a8:	4619      	mov	r1, r3
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <HAL_ADC_MspInit+0x140>)
 80004ac:	f001 fac6 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2012      	movs	r0, #18
 80004b6:	f001 fa8a 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004ba:	2012      	movs	r0, #18
 80004bc:	f001 faa3 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	; 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012400 	.word	0x40012400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40012800 	.word	0x40012800

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	; (800056c <MX_GPIO_Init+0x90>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_GPIO_Init+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_GPIO_Init+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_GPIO_Init+0x90>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_GPIO_Init+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_GPIO_Init+0x90>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_GPIO_Init+0x94>)
 8000540:	f001 fc00 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_GPIO_Init+0x94>)
 800055e:	f001 fa6d 	bl	8001a3c <HAL_GPIO_Init>

}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000

08000574 <HAL_ADC_ConvCpltCallback>:

uint32_t final_buffer[11] = {0};

uint8_t adc_ready = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	adc_ready = 1;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_ADC_ConvCpltCallback+0x18>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	200000b8 	.word	0x200000b8

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fadb 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f86d 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f7ff ff9d 	bl	80004dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a2:	f7ff fdd3 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 fa37 	bl	8000a18 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80005aa:	f7ff fe97 	bl	80002dc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0xc4>)
 80005b0:	f001 f880 	bl	80016b4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80005b4:	4828      	ldr	r0, [pc, #160]	; (8000658 <main+0xc8>)
 80005b6:	f001 f87d 	bl	80016b4 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fb2a 	bl	8000c14 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t*) "Hello", 6, 150);
 80005c0:	2396      	movs	r3, #150	; 0x96
 80005c2:	2206      	movs	r2, #6
 80005c4:	4925      	ldr	r1, [pc, #148]	; (800065c <main+0xcc>)
 80005c6:	4826      	ldr	r0, [pc, #152]	; (8000660 <main+0xd0>)
 80005c8:	f002 f9cf 	bl	800296a <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  read_adc();
 80005cc:	f000 f8ac 	bl	8000728 <read_adc>

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4823      	ldr	r0, [pc, #140]	; (8000664 <main+0xd4>)
 80005d6:	f001 fbcd 	bl	8001d74 <HAL_GPIO_TogglePin>

	  static uint32_t last_update = 0;
	  if(HAL_GetTick() >= last_update + 100){
 80005da:	f000 fb11 	bl	8000c00 <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3364      	adds	r3, #100	; 0x64
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d330      	bcc.n	800064c <main+0xbc>
		  for(uint8_t i = 0; i < 10; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	77fb      	strb	r3, [r7, #31]
 80005ee:	e01f      	b.n	8000630 <main+0xa0>
		  {
			  uint8_t str[20];
			  sprintf((char*) str, "ADC%d: %d\t", i, (uint8_t*) final_buffer[i]);
 80005f0:	7ffa      	ldrb	r2, [r7, #31]
 80005f2:	7ffb      	ldrb	r3, [r7, #31]
 80005f4:	491d      	ldr	r1, [pc, #116]	; (800066c <main+0xdc>)
 80005f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005fa:	1d38      	adds	r0, r7, #4
 80005fc:	491c      	ldr	r1, [pc, #112]	; (8000670 <main+0xe0>)
 80005fe:	f002 fb51 	bl	8002ca4 <siprintf>
			  HAL_UART_Transmit(&huart1, str, 20, 100);
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	2214      	movs	r2, #20
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <main+0xd0>)
 800060a:	f002 f9ae 	bl	800296a <HAL_UART_Transmit>
			  for(int index = 0; index < 20; index++){ str[index] = 0;}
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	e007      	b.n	8000624 <main+0x94>
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	4413      	add	r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	3301      	adds	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	2b13      	cmp	r3, #19
 8000628:	ddf4      	ble.n	8000614 <main+0x84>
		  for(uint8_t i = 0; i < 10; i++)
 800062a:	7ffb      	ldrb	r3, [r7, #31]
 800062c:	3301      	adds	r3, #1
 800062e:	77fb      	strb	r3, [r7, #31]
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9dc      	bls.n	80005f0 <main+0x60>
		  }
		  HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 2, 100);
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	2202      	movs	r2, #2
 800063a:	490e      	ldr	r1, [pc, #56]	; (8000674 <main+0xe4>)
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0xd0>)
 800063e:	f002 f994 	bl	800296a <HAL_UART_Transmit>
		  last_update = HAL_GetTick();
 8000642:	f000 fadd 	bl	8000c00 <HAL_GetTick>
 8000646:	4603      	mov	r3, r0
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <main+0xd8>)
 800064a:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fae1 	bl	8000c14 <HAL_Delay>
  {
 8000652:	e7bb      	b.n	80005cc <main+0x3c>
 8000654:	200000fc 	.word	0x200000fc
 8000658:	200000cc 	.word	0x200000cc
 800065c:	08003530 	.word	0x08003530
 8000660:	2000012c 	.word	0x2000012c
 8000664:	40011000 	.word	0x40011000
 8000668:	200000bc 	.word	0x200000bc
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08003538 	.word	0x08003538
 8000674:	08003544 	.word	0x08003544

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000682:	2228      	movs	r2, #40	; 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fb04 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80006bc:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb6e 	bl	8001da8 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d2:	f000 f8f7 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fdd8 	bl	80022a8 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006fe:	f000 f8e1 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000702:	2302      	movs	r3, #2
 8000704:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f001 ff64 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071a:	f000 f8d3 	bl	80008c4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <read_adc>:

/* USER CODE BEGIN 4 */

void read_adc(){
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b093      	sub	sp, #76	; 0x4c
 800072c:	af00      	add	r7, sp, #0

	uint32_t adc_1_values[11];
	uint32_t adc_2_values[4] = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

	for(uint8_t mode = 0; mode < 2; mode++){
 800073a:	2300      	movs	r3, #0
 800073c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000740:	e076      	b.n	8000830 <read_adc+0x108>
	  adc_ready = 0;
 8000742:	4b40      	ldr	r3, [pc, #256]	; (8000844 <read_adc+0x11c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	  if(mode == 0) HAL_ADC_Start_IT(&hadc1);
 8000748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800074c:	2b00      	cmp	r3, #0
 800074e:	d103      	bne.n	8000758 <read_adc+0x30>
 8000750:	483d      	ldr	r0, [pc, #244]	; (8000848 <read_adc+0x120>)
 8000752:	f000 fc8d 	bl	8001070 <HAL_ADC_Start_IT>
 8000756:	e002      	b.n	800075e <read_adc+0x36>
	  else 			HAL_ADC_Start_IT(&hadc2);
 8000758:	483c      	ldr	r0, [pc, #240]	; (800084c <read_adc+0x124>)
 800075a:	f000 fc89 	bl	8001070 <HAL_ADC_Start_IT>

	  if(mode == 0){
 800075e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000762:	2b00      	cmp	r3, #0
 8000764:	d11e      	bne.n	80007a4 <read_adc+0x7c>
		  for(uint8_t i = 0; i < 11; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800076c:	e015      	b.n	800079a <read_adc+0x72>
		  {
			HAL_ADC_PollForConversion(&hadc1, 100);
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <read_adc+0x120>)
 8000772:	f000 fb77 	bl	8000e64 <HAL_ADC_PollForConversion>
			adc_1_values[i] = HAL_ADC_GetValue(&hadc1);
 8000776:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 800077a:	4833      	ldr	r0, [pc, #204]	; (8000848 <read_adc+0x120>)
 800077c:	f000 fd2e 	bl	80011dc <HAL_ADC_GetValue>
 8000780:	4602      	mov	r2, r0
 8000782:	00a3      	lsls	r3, r4, #2
 8000784:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000788:	440b      	add	r3, r1
 800078a:	f843 2c34 	str.w	r2, [r3, #-52]

			asm("NOP");
 800078e:	bf00      	nop
		  for(uint8_t i = 0; i < 11; i++)
 8000790:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000794:	3301      	adds	r3, #1
 8000796:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800079a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d9e5      	bls.n	800076e <read_adc+0x46>
 80007a2:	e022      	b.n	80007ea <read_adc+0xc2>
		  }
	  }
	  else {
		for(uint8_t i = 0; i < 4; i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80007aa:	e014      	b.n	80007d6 <read_adc+0xae>
			HAL_ADC_PollForConversion(&hadc2, 100);
 80007ac:	2164      	movs	r1, #100	; 0x64
 80007ae:	4827      	ldr	r0, [pc, #156]	; (800084c <read_adc+0x124>)
 80007b0:	f000 fb58 	bl	8000e64 <HAL_ADC_PollForConversion>
			adc_2_values[i] = HAL_ADC_GetValue(&hadc2);
 80007b4:	f897 4045 	ldrb.w	r4, [r7, #69]	; 0x45
 80007b8:	4824      	ldr	r0, [pc, #144]	; (800084c <read_adc+0x124>)
 80007ba:	f000 fd0f 	bl	80011dc <HAL_ADC_GetValue>
 80007be:	4602      	mov	r2, r0
 80007c0:	00a3      	lsls	r3, r4, #2
 80007c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80007c6:	440b      	add	r3, r1
 80007c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for(uint8_t i = 0; i < 4; i++){
 80007cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80007d0:	3301      	adds	r3, #1
 80007d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80007d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d9e6      	bls.n	80007ac <read_adc+0x84>
		}
	  }

	  // Wait until ADC convert is competed
	  while(!adc_ready){
 80007de:	e004      	b.n	80007ea <read_adc+0xc2>
		  int z = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
		  z = z+1;
 80007e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e6:	3301      	adds	r3, #1
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
	  while(!adc_ready){
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <read_adc+0x11c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f6      	beq.n	80007e0 <read_adc+0xb8>
	  }

	  // Finally stop ADC convert as it's ready
	  if(mode == 0){
 80007f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10b      	bne.n	8000812 <read_adc+0xea>
		  HAL_ADC_Stop(&hadc1);
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <read_adc+0x120>)
 80007fc:	f000 fb06 	bl	8000e0c <HAL_ADC_Stop>
		  move_numbers(&adc_1_values[0], mode);
 8000800:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f820 	bl	8000850 <move_numbers>
 8000810:	e009      	b.n	8000826 <read_adc+0xfe>
	  }
	  else{
		  HAL_ADC_Stop(&hadc2);
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <read_adc+0x124>)
 8000814:	f000 fafa 	bl	8000e0c <HAL_ADC_Stop>
		  move_numbers(&adc_2_values[0], mode);
 8000818:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f815 	bl	8000850 <move_numbers>
	for(uint8_t mode = 0; mode < 2; mode++){
 8000826:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800082a:	3301      	adds	r3, #1
 800082c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000834:	2b01      	cmp	r3, #1
 8000836:	d984      	bls.n	8000742 <read_adc+0x1a>
	  }
	}
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	374c      	adds	r7, #76	; 0x4c
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	200000b8 	.word	0x200000b8
 8000848:	200000fc 	.word	0x200000fc
 800084c:	200000cc 	.word	0x200000cc

08000850 <move_numbers>:

void move_numbers(uint32_t *numbers, uint8_t mode){
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]

	if(mode == 0){
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d120      	bne.n	80008a4 <move_numbers+0x54>
		final_buffer[0] = numbers[6];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <move_numbers+0x70>)
 8000868:	6013      	str	r3, [r2, #0]
		final_buffer[1] = numbers[3];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <move_numbers+0x70>)
 8000870:	6053      	str	r3, [r2, #4]
		final_buffer[2] = numbers[0];
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <move_numbers+0x70>)
 8000878:	6093      	str	r3, [r2, #8]
		final_buffer[3] = numbers[10];
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <move_numbers+0x70>)
 8000880:	60d3      	str	r3, [r2, #12]
		final_buffer[4] = numbers[4];
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <move_numbers+0x70>)
 8000888:	6113      	str	r3, [r2, #16]
		final_buffer[5] = numbers[1];
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <move_numbers+0x70>)
 8000890:	6153      	str	r3, [r2, #20]
		final_buffer[7] = numbers[8];
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <move_numbers+0x70>)
 8000898:	61d3      	str	r3, [r2, #28]
		final_buffer[9] = numbers[2];
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <move_numbers+0x70>)
 80008a0:	6253      	str	r3, [r2, #36]	; 0x24
	else{
		final_buffer[6] = numbers[0];
		final_buffer[8] = numbers[1];
	}
//	*numbers = &buffer[0];
}
 80008a2:	e007      	b.n	80008b4 <move_numbers+0x64>
		final_buffer[6] = numbers[0];
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <move_numbers+0x70>)
 80008aa:	6193      	str	r3, [r2, #24]
		final_buffer[8] = numbers[1];
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <move_numbers+0x70>)
 80008b2:	6213      	str	r3, [r2, #32]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000008c 	.word	0x2000008c

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_MspInit+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_MspInit+0x60>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_MspInit+0x60>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000
 8000930:	40010000 	.word	0x40010000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f92f 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <ADC1_2_IRQHandler+0x14>)
 800098a:	f000 fc33 	bl	80011f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <ADC1_2_IRQHandler+0x18>)
 8000990:	f000 fc30 	bl	80011f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000fc 	.word	0x200000fc
 800099c:	200000cc 	.word	0x200000cc

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f002 f936 	bl	8002c40 <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20005000 	.word	0x20005000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	20000188 	.word	0x20000188

08000a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART1_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f001 ff3e 	bl	80028d0 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f7ff ff33 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000012c 	.word	0x2000012c
 8000a68:	40013800 	.word	0x40013800

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d131      	bne.n	8000af0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_UART_MspInit+0x90>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <HAL_UART_MspInit+0x94>)
 8000ad2:	f000 ffb3 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0x94>)
 8000aec:	f000 ffa6 	bl	8001a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ff6f 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 f88d 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fd2d 	bl	8000590 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b40:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 8000b44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b48:	20000184 	.word	0x20000184

08000b4c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <CAN1_RX1_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 ff29 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff feb0 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 ff41 	bl	8001a22 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 ff09 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000170 	.word	0x20000170

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000170 	.word	0x20000170

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0be      	b.n	8000dfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d109      	bne.n	8000ca0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fb7a 	bl	8000394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 fcc5 	bl	8001630 <ADC_ConversionStop_Disable>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8099 	bne.w	8000dea <HAL_ADC_Init+0x18e>
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 8095 	bne.w	8000dea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cc8:	f023 0302 	bic.w	r3, r3, #2
 8000ccc:	f043 0202 	orr.w	r2, r3, #2
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b1b      	ldrb	r3, [r3, #12]
 8000ce2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ce4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf4:	d003      	beq.n	8000cfe <HAL_ADC_Init+0xa2>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d102      	bne.n	8000d04 <HAL_ADC_Init+0xa8>
 8000cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d02:	e000      	b.n	8000d06 <HAL_ADC_Init+0xaa>
 8000d04:	2300      	movs	r3, #0
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7d1b      	ldrb	r3, [r3, #20]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d119      	bne.n	8000d48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7b1b      	ldrb	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	035a      	lsls	r2, r3, #13
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e00b      	b.n	8000d48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f043 0220 	orr.w	r2, r3, #32
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d40:	f043 0201 	orr.w	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HAL_ADC_Init+0x1a8>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0x126>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	051b      	lsls	r3, r3, #20
 8000d8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_ADC_Init+0x1ac>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10b      	bne.n	8000dc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc6:	e018      	b.n	8000dfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f023 0312 	bic.w	r3, r3, #18
 8000dd0:	f043 0210 	orr.w	r2, r3, #16
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de8:	e007      	b.n	8000dfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	ffe1f7fd 	.word	0xffe1f7fd
 8000e08:	ff1f0efe 	.word	0xff1f0efe

08000e0c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Stop+0x1a>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e01a      	b.n	8000e5c <HAL_ADC_Stop+0x50>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fbfe 	bl	8001630 <ADC_ConversionStop_Disable>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e7a:	f7ff fec1 	bl	8000c00 <HAL_GetTick>
 8000e7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f043 0220 	orr.w	r2, r3, #32
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0d3      	b.n	800104e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d131      	bne.n	8000f18 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d12a      	bne.n	8000f18 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ec2:	e021      	b.n	8000f08 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eca:	d01d      	beq.n	8000f08 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <HAL_ADC_PollForConversion+0x7e>
 8000ed2:	f7ff fe95 	bl	8000c00 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d212      	bcs.n	8000f08 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10b      	bne.n	8000f08 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f043 0204 	orr.w	r2, r3, #4
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0a2      	b.n	800104e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0d6      	beq.n	8000ec4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f16:	e070      	b.n	8000ffa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f18:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <HAL_ADC_PollForConversion+0x1f4>)
 8000f1a:	681c      	ldr	r4, [r3, #0]
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f001 fc13 	bl	8002748 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f22:	4603      	mov	r3, r0
 8000f24:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6919      	ldr	r1, [r3, #16]
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <HAL_ADC_PollForConversion+0x1f8>)
 8000f30:	400b      	ands	r3, r1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_ADC_PollForConversion+0x104>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68d9      	ldr	r1, [r3, #12]
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_ADC_PollForConversion+0x1fc>)
 8000f3e:	400b      	ands	r3, r1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_ADC_PollForConversion+0x104>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6919      	ldr	r1, [r3, #16]
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_ADC_PollForConversion+0x200>)
 8000f4c:	400b      	ands	r3, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d108      	bne.n	8000f64 <HAL_ADC_PollForConversion+0x100>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68d9      	ldr	r1, [r3, #12]
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_ADC_PollForConversion+0x204>)
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_ADC_PollForConversion+0x100>
 8000f60:	2314      	movs	r3, #20
 8000f62:	e020      	b.n	8000fa6 <HAL_ADC_PollForConversion+0x142>
 8000f64:	2329      	movs	r3, #41	; 0x29
 8000f66:	e01e      	b.n	8000fa6 <HAL_ADC_PollForConversion+0x142>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6919      	ldr	r1, [r3, #16]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <HAL_ADC_PollForConversion+0x200>)
 8000f70:	400b      	ands	r3, r1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_ADC_PollForConversion+0x120>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68d9      	ldr	r1, [r3, #12]
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_ADC_PollForConversion+0x204>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00d      	beq.n	8000fa0 <HAL_ADC_PollForConversion+0x13c>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6919      	ldr	r1, [r3, #16]
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_ADC_PollForConversion+0x208>)
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d108      	bne.n	8000fa4 <HAL_ADC_PollForConversion+0x140>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68d9      	ldr	r1, [r3, #12]
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_ADC_PollForConversion+0x208>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_ADC_PollForConversion+0x140>
 8000fa0:	2354      	movs	r3, #84	; 0x54
 8000fa2:	e000      	b.n	8000fa6 <HAL_ADC_PollForConversion+0x142>
 8000fa4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fac:	e021      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d01a      	beq.n	8000fec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x168>
 8000fbc:	f7ff fe20 	bl	8000c00 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d20f      	bcs.n	8000fec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d90b      	bls.n	8000fec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f043 0204 	orr.w	r2, r3, #4
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e030      	b.n	800104e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d8d9      	bhi.n	8000fae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f06f 0212 	mvn.w	r2, #18
 8001002:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800101a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800101e:	d115      	bne.n	800104c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001024:	2b00      	cmp	r3, #0
 8001026:	d111      	bne.n	800104c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f043 0201 	orr.w	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	24924924 	.word	0x24924924
 8001060:	00924924 	.word	0x00924924
 8001064:	12492492 	.word	0x12492492
 8001068:	00492492 	.word	0x00492492
 800106c:	00249249 	.word	0x00249249

08001070 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ADC_Start_IT+0x1a>
 8001086:	2302      	movs	r3, #2
 8001088:	e0a0      	b.n	80011cc <HAL_ADC_Start_IT+0x15c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fa72 	bl	800157c <ADC_Enable>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 808f 	bne.w	80011c2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_ADC_Start_IT+0x164>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d105      	bne.n	80010ce <HAL_ADC_Start_IT+0x5e>
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <HAL_ADC_Start_IT+0x168>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d115      	bne.n	80010fa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d026      	beq.n	8001136 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f8:	e01d      	b.n	8001136 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <HAL_ADC_Start_IT+0x168>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d004      	beq.n	800111a <HAL_ADC_Start_IT+0xaa>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <HAL_ADC_Start_IT+0x164>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_ADC_Start_IT+0xc6>
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_ADC_Start_IT+0x168>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800112e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	f023 0206 	bic.w	r2, r3, #6
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 800114e:	e002      	b.n	8001156 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f06f 0202 	mvn.w	r2, #2
 8001166:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001182:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001186:	d113      	bne.n	80011b0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_ADC_Start_IT+0x164>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_Start_IT+0x168>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d108      	bne.n	80011b0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	e00c      	b.n	80011ca <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	e003      	b.n	80011ca <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40012800 	.word	0x40012800
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b20      	cmp	r3, #32
 8001208:	d140      	bne.n	800128c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b02      	cmp	r3, #2
 8001216:	d139      	bne.n	800128c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800123a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800123e:	d11d      	bne.n	800127c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001244:	2b00      	cmp	r3, #0
 8001246:	d119      	bne.n	800127c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0220 	bic.w	r2, r2, #32
 8001256:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d105      	bne.n	800127c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff f979 	bl	8000574 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f06f 0212 	mvn.w	r2, #18
 800128a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	2b80      	cmp	r3, #128	; 0x80
 8001298:	d14f      	bne.n	800133a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d148      	bne.n	800133a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012ca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012ce:	d012      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d125      	bne.n	800132a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012ec:	d11d      	bne.n	800132a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001304:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fa6e 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f06f 020c 	mvn.w	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	2b40      	cmp	r3, #64	; 0x40
 8001346:	d114      	bne.n	8001372 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10d      	bne.n	8001372 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f809 	bl	800137a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f06f 0201 	mvn.w	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x20>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e0dc      	b.n	8001566 <HAL_ADC_ConfigChannel+0x1da>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d81c      	bhi.n	80013f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b05      	subs	r3, #5
 80013ce:	221f      	movs	r2, #31
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4019      	ands	r1, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b05      	subs	r3, #5
 80013e8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
 80013f4:	e03c      	b.n	8001470 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d81c      	bhi.n	8001438 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b23      	subs	r3, #35	; 0x23
 8001410:	221f      	movs	r2, #31
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	4019      	ands	r1, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b23      	subs	r3, #35	; 0x23
 800142a:	fa00 f203 	lsl.w	r2, r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
 8001436:	e01b      	b.n	8001470 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b41      	subs	r3, #65	; 0x41
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b41      	subs	r3, #65	; 0x41
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b09      	cmp	r3, #9
 8001476:	d91c      	bls.n	80014b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68d9      	ldr	r1, [r3, #12]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	3b1e      	subs	r3, #30
 800148a:	2207      	movs	r2, #7
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	4019      	ands	r1, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6898      	ldr	r0, [r3, #8]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	3b1e      	subs	r3, #30
 80014a4:	fa00 f203 	lsl.w	r2, r0, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	e019      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6919      	ldr	r1, [r3, #16]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	2207      	movs	r2, #7
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	fa00 f203 	lsl.w	r2, r0, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d003      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014f2:	2b11      	cmp	r3, #17
 80014f4:	d132      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_ADC_ConfigChannel+0x1e4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d125      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d126      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800151c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d11a      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_ADC_ConfigChannel+0x1e8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <HAL_ADC_ConfigChannel+0x1ec>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9a      	lsrs	r2, r3, #18
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153c:	e002      	b.n	8001544 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <HAL_ADC_ConfigChannel+0x1b2>
 800154a:	e007      	b.n	800155c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f043 0220 	orr.w	r2, r3, #32
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40012400 	.word	0x40012400
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d040      	beq.n	800161c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <ADC_Enable+0xac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <ADC_Enable+0xb0>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b8:	e002      	b.n	80015c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015c6:	f7ff fb1b 	bl	8000c00 <HAL_GetTick>
 80015ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015cc:	e01f      	b.n	800160e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015ce:	f7ff fb17 	bl	8000c00 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d918      	bls.n	800160e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d011      	beq.n	800160e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	f043 0210 	orr.w	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e007      	b.n	800161e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d1d8      	bne.n	80015ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	431bde83 	.word	0x431bde83

08001630 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d12e      	bne.n	80016a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800165a:	f7ff fad1 	bl	8000c00 <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001660:	e01b      	b.n	800169a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001662:	f7ff facd 	bl	8000c00 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d914      	bls.n	800169a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10d      	bne.n	800169a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e007      	b.n	80016aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d0dc      	beq.n	8001662 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e095      	b.n	80017fe <HAL_ADCEx_Calibration_Start+0x14a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa8 	bl	8001630 <ADC_ConversionStop_Disable>
 80016e0:	4603      	mov	r3, r0
 80016e2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8084 	bne.w	80017f4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f4:	f023 0302 	bic.w	r3, r3, #2
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_ADCEx_Calibration_Start+0x154>)
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	2002      	movs	r0, #2
 8001706:	f001 f81f 	bl	8002748 <HAL_RCCEx_GetPeriphCLKFreq>
 800170a:	4603      	mov	r3, r0
 800170c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001710:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001712:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b01      	subs	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff2a 	bl	800157c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0208 	orr.w	r2, r2, #8
 8001736:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001738:	f7ff fa62 	bl	8000c00 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800173e:	e01b      	b.n	8001778 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001740:	f7ff fa5e 	bl	8000c00 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b0a      	cmp	r3, #10
 800174c:	d914      	bls.n	8001778 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00d      	beq.n	8001778 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f023 0312 	bic.w	r3, r3, #18
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e042      	b.n	80017fe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1dc      	bne.n	8001740 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0204 	orr.w	r2, r2, #4
 8001794:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001796:	f7ff fa33 	bl	8000c00 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800179c:	e01b      	b.n	80017d6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800179e:	f7ff fa2f 	bl	8000c00 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b0a      	cmp	r3, #10
 80017aa:	d914      	bls.n	80017d6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f023 0312 	bic.w	r3, r3, #18
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e013      	b.n	80017fe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1dc      	bne.n	800179e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f023 0303 	bic.w	r3, r3, #3
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
	...

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <__NVIC_EnableIRQ+0x34>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff90 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff2d 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff42 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff90 	bl	8001910 <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5f 	bl	80018bc <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff35 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e169      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8158 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a9a      	ldr	r2, [pc, #616]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d05e      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a78:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d875      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a7e:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d058      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a84:	4a96      	ldr	r2, [pc, #600]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d86f      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a8a:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d052      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a90:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d869      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a96:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04c      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d863      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aa2:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d046      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d85d      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d82a      	bhi.n	8001b08 <HAL_GPIO_Init+0xcc>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d859      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_GPIO_Init+0x80>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001b23 	.word	0x08001b23
 8001ac8:	08001b65 	.word	0x08001b65
 8001acc:	08001b6b 	.word	0x08001b6b
 8001ad0:	08001b6b 	.word	0x08001b6b
 8001ad4:	08001b6b 	.word	0x08001b6b
 8001ad8:	08001b6b 	.word	0x08001b6b
 8001adc:	08001b6b 	.word	0x08001b6b
 8001ae0:	08001b6b 	.word	0x08001b6b
 8001ae4:	08001b6b 	.word	0x08001b6b
 8001ae8:	08001b6b 	.word	0x08001b6b
 8001aec:	08001b6b 	.word	0x08001b6b
 8001af0:	08001b6b 	.word	0x08001b6b
 8001af4:	08001b6b 	.word	0x08001b6b
 8001af8:	08001b6b 	.word	0x08001b6b
 8001afc:	08001b6b 	.word	0x08001b6b
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b2d 	.word	0x08001b2d
 8001b08:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_GPIO_Init+0x2b4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0e:	e02c      	b.n	8001b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e029      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e024      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3308      	adds	r3, #8
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e01f      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	330c      	adds	r3, #12
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e01a      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e013      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	611a      	str	r2, [r3, #16]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	615a      	str	r2, [r3, #20]
          break;
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          break;
 8001b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d801      	bhi.n	8001b76 <HAL_GPIO_Init+0x13a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_Init+0x13e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	d802      	bhi.n	8001b88 <HAL_GPIO_Init+0x14c>
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x152>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	210f      	movs	r1, #15
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80b1 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd4:	4a48      	ldr	r2, [pc, #288]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <HAL_GPIO_Init+0x2c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_GPIO_Init+0x2c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_GPIO_Init+0x2c8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <HAL_GPIO_Init+0x2cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1e0>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	492f      	ldr	r1, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	492c      	ldr	r1, [pc, #176]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4928      	ldr	r1, [pc, #160]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	491e      	ldr	r1, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4918      	ldr	r1, [pc, #96]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4914      	ldr	r1, [pc, #80]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
 8001cd8:	e021      	b.n	8001d1e <HAL_GPIO_Init+0x2e2>
 8001cda:	bf00      	nop
 8001cdc:	10320000 	.word	0x10320000
 8001ce0:	10310000 	.word	0x10310000
 8001ce4:	10220000 	.word	0x10220000
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	10120000 	.word	0x10120000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4909      	ldr	r1, [pc, #36]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f ae8e 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	372c      	adds	r7, #44	; 0x2c
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43d9      	mvns	r1, r3
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	400b      	ands	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e26c      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc8:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00c      	beq.n	8001dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d112      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
 8001de0:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d10b      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d06c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d168      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e246      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x76>
 8001e10:	4b80      	ldr	r3, [pc, #512]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a7f      	ldr	r2, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e02e      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7a      	ldr	r2, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b78      	ldr	r3, [pc, #480]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a77      	ldr	r2, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0xbc>
 8001e4a:	4b72      	ldr	r3, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a71      	ldr	r2, [pc, #452]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xd4>
 8001e64:	4b6b      	ldr	r3, [pc, #428]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6a      	ldr	r2, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a67      	ldr	r2, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe febc 	bl	8000c00 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe feb8 	bl	8000c00 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1fa      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe4>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7fe fea8 	bl	8000c00 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fea4 	bl	8000c00 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1e6      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x10c>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eee:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1ba      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4939      	ldr	r1, [pc, #228]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fe5d 	bl	8000c00 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7fe fe59 	bl	8000c00 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e19b      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4927      	ldr	r1, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fe3c 	bl	8000c00 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7fe fe38 	bl	8000c00 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e17a      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d03a      	beq.n	800202c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fe1c 	bl	8000c00 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fe18 	bl	8000c00 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e15a      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f000 fad8 	bl	80025a0 <RCC_Delay>
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fe02 	bl	8000c00 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fdfe 	bl	8000c00 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d908      	bls.n	8002020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e140      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	42420000 	.word	0x42420000
 800201c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e9      	bne.n	8002000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a6 	beq.w	8002186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b97      	ldr	r3, [pc, #604]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a93      	ldr	r2, [pc, #588]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <HAL_RCC_OscConfig+0x4f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <HAL_RCC_OscConfig+0x4f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a8a      	ldr	r2, [pc, #552]	; (80022a0 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe fdbf 	bl	8000c00 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fdbb 	bl	8000c00 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0fd      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x4f8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x312>
 80020ac:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a7a      	ldr	r2, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e02d      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x334>
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a75      	ldr	r2, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	e01c      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d10c      	bne.n	80020fe <HAL_RCC_OscConfig+0x356>
 80020e4:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a6c      	ldr	r2, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a69      	ldr	r2, [pc, #420]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e00b      	b.n	8002116 <HAL_RCC_OscConfig+0x36e>
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a66      	ldr	r2, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a63      	ldr	r2, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d015      	beq.n	800214a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe fd6f 	bl	8000c00 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fd6b 	bl	8000c00 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0ab      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ee      	beq.n	8002126 <HAL_RCC_OscConfig+0x37e>
 8002148:	e014      	b.n	8002174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fd59 	bl	8000c00 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fd55 	bl	8000c00 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e095      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d105      	bne.n	8002186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a47      	ldr	r2, [pc, #284]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8081 	beq.w	8002292 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d061      	beq.n	8002260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d146      	bne.n	8002232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_OscConfig+0x4fc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fd29 	bl	8000c00 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fd25 	bl	8000c00 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e067      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	492d      	ldr	r1, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a19      	ldr	r1, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	430b      	orrs	r3, r1
 80021fe:	4927      	ldr	r1, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x4fc>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fcf9 	bl	8000c00 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fcf5 	bl	8000c00 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e037      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x46a>
 8002230:	e02f      	b.n	8002292 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_RCC_OscConfig+0x4fc>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fce2 	bl	8000c00 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fcde 	bl	8000c00 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e020      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x498>
 800225e:	e018      	b.n	8002292 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e013      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x4f4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	40007000 	.word	0x40007000
 80022a4:	42420060 	.word	0x42420060

080022a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d0      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4965      	ldr	r1, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800230e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e073      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fc32 	bl	8000c00 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fc2e 	bl	8000c00 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e053      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d210      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1cc>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fb90 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40022000 	.word	0x40022000
 800246c:	40021000 	.word	0x40021000
 8002470:	08003568 	.word	0x08003568
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b490      	push	{r4, r7}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002484:	1d3c      	adds	r4, r7, #4
 8002486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800248c:	f240 2301 	movw	r3, #513	; 0x201
 8002490:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x40>
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x46>
 80024ba:	e02d      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	623b      	str	r3, [r7, #32]
      break;
 80024c0:	e02d      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ce:	4413      	add	r3, r2
 80024d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c5b      	lsrs	r3, r3, #17
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ee:	4413      	add	r3, r2
 80024f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fa:	fb02 f203 	mul.w	r2, r2, r3
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	e004      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <HAL_RCC_GetSysClockFreq+0xbc>)
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	623b      	str	r3, [r7, #32]
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251a:	623b      	str	r3, [r7, #32]
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	6a3b      	ldr	r3, [r7, #32]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3728      	adds	r7, #40	; 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc90      	pop	{r4, r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	08003548 	.word	0x08003548
 8002530:	40021000 	.word	0x40021000
 8002534:	007a1200 	.word	0x007a1200
 8002538:	003d0900 	.word	0x003d0900

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_RCC_GetHCLKFreq+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff2 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08003578 	.word	0x08003578

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800257c:	f7ff ffde 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	0adb      	lsrs	r3, r3, #11
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	; (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08003578 	.word	0x08003578

080025a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCC_Delay+0x34>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <RCC_Delay+0x38>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025bc:	bf00      	nop
  }
  while (Delay --);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <RCC_Delay+0x1c>
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000000 	.word	0x20000000
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d07d      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	61d3      	str	r3, [r2, #28]
 8002614:	4b49      	ldr	r3, [pc, #292]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d118      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a42      	ldr	r2, [pc, #264]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7fe fae0 	bl	8000c00 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe fadc 	bl	8000c00 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06d      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d027      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002696:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d014      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe faab 	bl	8000c00 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe faa7 	bl	8000c00 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e036      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4917      	ldr	r1, [pc, #92]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	490b      	ldr	r1, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	42420440 	.word	0x42420440

08002748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b08d      	sub	sp, #52	; 0x34
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002752:	f107 040c 	add.w	r4, r7, #12
 8002756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800275c:	f240 2301 	movw	r3, #513	; 0x201
 8002760:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b10      	cmp	r3, #16
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b10      	cmp	r3, #16
 8002780:	f200 8091 	bhi.w	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d04c      	beq.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d07c      	beq.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002790:	e089      	b.n	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8082 	beq.w	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027b2:	4413      	add	r3, r2
 80027b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027b8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d018      	beq.n	80027f6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c4:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c5b      	lsrs	r3, r3, #17
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027d2:	4413      	add	r3, r2
 80027d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027e4:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f4:	e004      	b.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	d102      	bne.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002812:	e04a      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002822:	e042      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d108      	bne.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	e01f      	b.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002852:	d109      	bne.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002860:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
 8002866:	e00f      	b.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002872:	d11c      	bne.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002880:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002886:	e012      	b.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002888:	e011      	b.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800288a:	f7ff fe75 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0b9b      	lsrs	r3, r3, #14
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028a4:	e004      	b.n	80028b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80028a6:	bf00      	nop
 80028a8:	e002      	b.n	80028b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80028ae:	bf00      	nop
    }
  }
  return (frequency);
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3734      	adds	r7, #52	; 0x34
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08003558 	.word	0x08003558
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	003d0900 	.word	0x003d0900
 80028cc:	aaaaaaab 	.word	0xaaaaaaab

080028d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e03f      	b.n	8002962 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f8b8 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f905 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b08a      	sub	sp, #40	; 0x28
 800296e:	af02      	add	r7, sp, #8
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	d17c      	bne.n	8002a84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_Transmit+0x2c>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e075      	b.n	8002a86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x3e>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e06e      	b.n	8002a86 <HAL_UART_Transmit+0x11c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2221      	movs	r2, #33	; 0x21
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029be:	f7fe f91f 	bl	8000c00 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d108      	bne.n	80029ec <HAL_UART_Transmit+0x82>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e003      	b.n	80029f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029fc:	e02a      	b.n	8002a54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f840 	bl	8002a8e <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e036      	b.n	8002a86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10b      	bne.n	8002a36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	3302      	adds	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e007      	b.n	8002a46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3301      	adds	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1cf      	bne.n	80029fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2140      	movs	r1, #64	; 0x40
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f810 	bl	8002a8e <UART_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e006      	b.n	8002a86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	e02c      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d028      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x30>
 8002aae:	f7fe f8a7 	bl	8000c00 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d21d      	bcs.n	8002afa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002acc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00f      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d0c3      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b5e:	f023 030c 	bic.w	r3, r3, #12
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <UART_SetConfig+0x114>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b8c:	f7ff fcf4 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	e002      	b.n	8002b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7ff fcdc 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8002b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	0119      	lsls	r1, r3, #4
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <UART_SetConfig+0x118>)
 8002bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <UART_SetConfig+0x118>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	4419      	add	r1, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <UART_SetConfig+0x118>)
 8002c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	3332      	adds	r3, #50	; 0x32
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <UART_SetConfig+0x118>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	51eb851f 	.word	0x51eb851f

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 fc5c 	bl	8003518 <_init>
 8002c60:	2600      	movs	r6, #0
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	080035b4 	.word	0x080035b4
 8002c88:	080035b4 	.word	0x080035b4
 8002c8c:	080035b4 	.word	0x080035b4
 8002c90:	080035b8 	.word	0x080035b8

08002c94 <memset>:
 8002c94:	4603      	mov	r3, r0
 8002c96:	4402      	add	r2, r0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <siprintf>:
 8002ca4:	b40e      	push	{r1, r2, r3}
 8002ca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002caa:	b500      	push	{lr}
 8002cac:	b09c      	sub	sp, #112	; 0x70
 8002cae:	ab1d      	add	r3, sp, #116	; 0x74
 8002cb0:	9002      	str	r0, [sp, #8]
 8002cb2:	9006      	str	r0, [sp, #24]
 8002cb4:	9107      	str	r1, [sp, #28]
 8002cb6:	9104      	str	r1, [sp, #16]
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <siprintf+0x38>)
 8002cba:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <siprintf+0x3c>)
 8002cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cc0:	9105      	str	r1, [sp, #20]
 8002cc2:	6800      	ldr	r0, [r0, #0]
 8002cc4:	a902      	add	r1, sp, #8
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f000 f868 	bl	8002d9c <_svfiprintf_r>
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	b01c      	add	sp, #112	; 0x70
 8002cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cd8:	b003      	add	sp, #12
 8002cda:	4770      	bx	lr
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	ffff0208 	.word	0xffff0208

08002ce4 <__ssputs_r>:
 8002ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce8:	688e      	ldr	r6, [r1, #8]
 8002cea:	4682      	mov	sl, r0
 8002cec:	429e      	cmp	r6, r3
 8002cee:	460c      	mov	r4, r1
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	461f      	mov	r7, r3
 8002cf4:	d838      	bhi.n	8002d68 <__ssputs_r+0x84>
 8002cf6:	898a      	ldrh	r2, [r1, #12]
 8002cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cfc:	d032      	beq.n	8002d64 <__ssputs_r+0x80>
 8002cfe:	6825      	ldr	r5, [r4, #0]
 8002d00:	6909      	ldr	r1, [r1, #16]
 8002d02:	3301      	adds	r3, #1
 8002d04:	eba5 0901 	sub.w	r9, r5, r1
 8002d08:	6965      	ldr	r5, [r4, #20]
 8002d0a:	444b      	add	r3, r9
 8002d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d14:	106d      	asrs	r5, r5, #1
 8002d16:	429d      	cmp	r5, r3
 8002d18:	bf38      	it	cc
 8002d1a:	461d      	movcc	r5, r3
 8002d1c:	0553      	lsls	r3, r2, #21
 8002d1e:	d531      	bpl.n	8002d84 <__ssputs_r+0xa0>
 8002d20:	4629      	mov	r1, r5
 8002d22:	f000 fb53 	bl	80033cc <_malloc_r>
 8002d26:	4606      	mov	r6, r0
 8002d28:	b950      	cbnz	r0, 8002d40 <__ssputs_r+0x5c>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f8ca 3000 	str.w	r3, [sl]
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	464a      	mov	r2, r9
 8002d42:	6921      	ldr	r1, [r4, #16]
 8002d44:	f000 face 	bl	80032e4 <memcpy>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	6126      	str	r6, [r4, #16]
 8002d56:	444e      	add	r6, r9
 8002d58:	6026      	str	r6, [r4, #0]
 8002d5a:	463e      	mov	r6, r7
 8002d5c:	6165      	str	r5, [r4, #20]
 8002d5e:	eba5 0509 	sub.w	r5, r5, r9
 8002d62:	60a5      	str	r5, [r4, #8]
 8002d64:	42be      	cmp	r6, r7
 8002d66:	d900      	bls.n	8002d6a <__ssputs_r+0x86>
 8002d68:	463e      	mov	r6, r7
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	f000 fac6 	bl	8003300 <memmove>
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	1b9b      	subs	r3, r3, r6
 8002d7a:	4432      	add	r2, r6
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	60a3      	str	r3, [r4, #8]
 8002d80:	6022      	str	r2, [r4, #0]
 8002d82:	e7db      	b.n	8002d3c <__ssputs_r+0x58>
 8002d84:	462a      	mov	r2, r5
 8002d86:	f000 fb7b 	bl	8003480 <_realloc_r>
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1e1      	bne.n	8002d54 <__ssputs_r+0x70>
 8002d90:	4650      	mov	r0, sl
 8002d92:	6921      	ldr	r1, [r4, #16]
 8002d94:	f000 face 	bl	8003334 <_free_r>
 8002d98:	e7c7      	b.n	8002d2a <__ssputs_r+0x46>
	...

08002d9c <_svfiprintf_r>:
 8002d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da0:	4698      	mov	r8, r3
 8002da2:	898b      	ldrh	r3, [r1, #12]
 8002da4:	4607      	mov	r7, r0
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	460d      	mov	r5, r1
 8002daa:	4614      	mov	r4, r2
 8002dac:	b09d      	sub	sp, #116	; 0x74
 8002dae:	d50e      	bpl.n	8002dce <_svfiprintf_r+0x32>
 8002db0:	690b      	ldr	r3, [r1, #16]
 8002db2:	b963      	cbnz	r3, 8002dce <_svfiprintf_r+0x32>
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	f000 fb09 	bl	80033cc <_malloc_r>
 8002dba:	6028      	str	r0, [r5, #0]
 8002dbc:	6128      	str	r0, [r5, #16]
 8002dbe:	b920      	cbnz	r0, 8002dca <_svfiprintf_r+0x2e>
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	e0d1      	b.n	8002f6e <_svfiprintf_r+0x1d2>
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	616b      	str	r3, [r5, #20]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dd8:	2330      	movs	r3, #48	; 0x30
 8002dda:	f04f 0901 	mov.w	r9, #1
 8002dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002de2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f88 <_svfiprintf_r+0x1ec>
 8002de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dea:	4623      	mov	r3, r4
 8002dec:	469a      	mov	sl, r3
 8002dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002df2:	b10a      	cbz	r2, 8002df8 <_svfiprintf_r+0x5c>
 8002df4:	2a25      	cmp	r2, #37	; 0x25
 8002df6:	d1f9      	bne.n	8002dec <_svfiprintf_r+0x50>
 8002df8:	ebba 0b04 	subs.w	fp, sl, r4
 8002dfc:	d00b      	beq.n	8002e16 <_svfiprintf_r+0x7a>
 8002dfe:	465b      	mov	r3, fp
 8002e00:	4622      	mov	r2, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	4638      	mov	r0, r7
 8002e06:	f7ff ff6d 	bl	8002ce4 <__ssputs_r>
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f000 80aa 	beq.w	8002f64 <_svfiprintf_r+0x1c8>
 8002e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e12:	445a      	add	r2, fp
 8002e14:	9209      	str	r2, [sp, #36]	; 0x24
 8002e16:	f89a 3000 	ldrb.w	r3, [sl]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a2 	beq.w	8002f64 <_svfiprintf_r+0x1c8>
 8002e20:	2300      	movs	r3, #0
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e2a:	f10a 0a01 	add.w	sl, sl, #1
 8002e2e:	9304      	str	r3, [sp, #16]
 8002e30:	9307      	str	r3, [sp, #28]
 8002e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e36:	931a      	str	r3, [sp, #104]	; 0x68
 8002e38:	4654      	mov	r4, sl
 8002e3a:	2205      	movs	r2, #5
 8002e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e40:	4851      	ldr	r0, [pc, #324]	; (8002f88 <_svfiprintf_r+0x1ec>)
 8002e42:	f000 fa41 	bl	80032c8 <memchr>
 8002e46:	9a04      	ldr	r2, [sp, #16]
 8002e48:	b9d8      	cbnz	r0, 8002e82 <_svfiprintf_r+0xe6>
 8002e4a:	06d0      	lsls	r0, r2, #27
 8002e4c:	bf44      	itt	mi
 8002e4e:	2320      	movmi	r3, #32
 8002e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e54:	0711      	lsls	r1, r2, #28
 8002e56:	bf44      	itt	mi
 8002e58:	232b      	movmi	r3, #43	; 0x2b
 8002e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e62:	2b2a      	cmp	r3, #42	; 0x2a
 8002e64:	d015      	beq.n	8002e92 <_svfiprintf_r+0xf6>
 8002e66:	4654      	mov	r4, sl
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f04f 0c0a 	mov.w	ip, #10
 8002e6e:	9a07      	ldr	r2, [sp, #28]
 8002e70:	4621      	mov	r1, r4
 8002e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e76:	3b30      	subs	r3, #48	; 0x30
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d94e      	bls.n	8002f1a <_svfiprintf_r+0x17e>
 8002e7c:	b1b0      	cbz	r0, 8002eac <_svfiprintf_r+0x110>
 8002e7e:	9207      	str	r2, [sp, #28]
 8002e80:	e014      	b.n	8002eac <_svfiprintf_r+0x110>
 8002e82:	eba0 0308 	sub.w	r3, r0, r8
 8002e86:	fa09 f303 	lsl.w	r3, r9, r3
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	46a2      	mov	sl, r4
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	e7d2      	b.n	8002e38 <_svfiprintf_r+0x9c>
 8002e92:	9b03      	ldr	r3, [sp, #12]
 8002e94:	1d19      	adds	r1, r3, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	9103      	str	r1, [sp, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bfbb      	ittet	lt
 8002e9e:	425b      	neglt	r3, r3
 8002ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ea4:	9307      	strge	r3, [sp, #28]
 8002ea6:	9307      	strlt	r3, [sp, #28]
 8002ea8:	bfb8      	it	lt
 8002eaa:	9204      	strlt	r2, [sp, #16]
 8002eac:	7823      	ldrb	r3, [r4, #0]
 8002eae:	2b2e      	cmp	r3, #46	; 0x2e
 8002eb0:	d10c      	bne.n	8002ecc <_svfiprintf_r+0x130>
 8002eb2:	7863      	ldrb	r3, [r4, #1]
 8002eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb6:	d135      	bne.n	8002f24 <_svfiprintf_r+0x188>
 8002eb8:	9b03      	ldr	r3, [sp, #12]
 8002eba:	3402      	adds	r4, #2
 8002ebc:	1d1a      	adds	r2, r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	9203      	str	r2, [sp, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfb8      	it	lt
 8002ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eca:	9305      	str	r3, [sp, #20]
 8002ecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f98 <_svfiprintf_r+0x1fc>
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4650      	mov	r0, sl
 8002ed4:	7821      	ldrb	r1, [r4, #0]
 8002ed6:	f000 f9f7 	bl	80032c8 <memchr>
 8002eda:	b140      	cbz	r0, 8002eee <_svfiprintf_r+0x152>
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	eba0 000a 	sub.w	r0, r0, sl
 8002ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	3401      	adds	r4, #1
 8002eea:	4303      	orrs	r3, r0
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	4825      	ldr	r0, [pc, #148]	; (8002f8c <_svfiprintf_r+0x1f0>)
 8002ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002efa:	f000 f9e5 	bl	80032c8 <memchr>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d038      	beq.n	8002f74 <_svfiprintf_r+0x1d8>
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <_svfiprintf_r+0x1f4>)
 8002f04:	bb1b      	cbnz	r3, 8002f4e <_svfiprintf_r+0x1b2>
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	3307      	adds	r3, #7
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	3308      	adds	r3, #8
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f14:	4433      	add	r3, r6
 8002f16:	9309      	str	r3, [sp, #36]	; 0x24
 8002f18:	e767      	b.n	8002dea <_svfiprintf_r+0x4e>
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f22:	e7a5      	b.n	8002e70 <_svfiprintf_r+0xd4>
 8002f24:	2300      	movs	r3, #0
 8002f26:	f04f 0c0a 	mov.w	ip, #10
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	9305      	str	r3, [sp, #20]
 8002f30:	4620      	mov	r0, r4
 8002f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f36:	3a30      	subs	r2, #48	; 0x30
 8002f38:	2a09      	cmp	r2, #9
 8002f3a:	d903      	bls.n	8002f44 <_svfiprintf_r+0x1a8>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0c5      	beq.n	8002ecc <_svfiprintf_r+0x130>
 8002f40:	9105      	str	r1, [sp, #20]
 8002f42:	e7c3      	b.n	8002ecc <_svfiprintf_r+0x130>
 8002f44:	4604      	mov	r4, r0
 8002f46:	2301      	movs	r3, #1
 8002f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f4c:	e7f0      	b.n	8002f30 <_svfiprintf_r+0x194>
 8002f4e:	ab03      	add	r3, sp, #12
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	462a      	mov	r2, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <_svfiprintf_r+0x1f8>)
 8002f58:	a904      	add	r1, sp, #16
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	1c42      	adds	r2, r0, #1
 8002f60:	4606      	mov	r6, r0
 8002f62:	d1d6      	bne.n	8002f12 <_svfiprintf_r+0x176>
 8002f64:	89ab      	ldrh	r3, [r5, #12]
 8002f66:	065b      	lsls	r3, r3, #25
 8002f68:	f53f af2c 	bmi.w	8002dc4 <_svfiprintf_r+0x28>
 8002f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f6e:	b01d      	add	sp, #116	; 0x74
 8002f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f74:	ab03      	add	r3, sp, #12
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	462a      	mov	r2, r5
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <_svfiprintf_r+0x1f8>)
 8002f7e:	a904      	add	r1, sp, #16
 8002f80:	f000 f87c 	bl	800307c <_printf_i>
 8002f84:	e7eb      	b.n	8002f5e <_svfiprintf_r+0x1c2>
 8002f86:	bf00      	nop
 8002f88:	08003580 	.word	0x08003580
 8002f8c:	0800358a 	.word	0x0800358a
 8002f90:	00000000 	.word	0x00000000
 8002f94:	08002ce5 	.word	0x08002ce5
 8002f98:	08003586 	.word	0x08003586

08002f9c <_printf_common>:
 8002f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4616      	mov	r6, r2
 8002fa2:	4699      	mov	r9, r3
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	4607      	mov	r7, r0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	bfb8      	it	lt
 8002fae:	4613      	movlt	r3, r2
 8002fb0:	6033      	str	r3, [r6, #0]
 8002fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fbc:	b10a      	cbz	r2, 8002fc2 <_printf_common+0x26>
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	0699      	lsls	r1, r3, #26
 8002fc6:	bf42      	ittt	mi
 8002fc8:	6833      	ldrmi	r3, [r6, #0]
 8002fca:	3302      	addmi	r3, #2
 8002fcc:	6033      	strmi	r3, [r6, #0]
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	f015 0506 	ands.w	r5, r5, #6
 8002fd4:	d106      	bne.n	8002fe4 <_printf_common+0x48>
 8002fd6:	f104 0a19 	add.w	sl, r4, #25
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	42ab      	cmp	r3, r5
 8002fe2:	dc28      	bgt.n	8003036 <_printf_common+0x9a>
 8002fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fe8:	1e13      	subs	r3, r2, #0
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	bf18      	it	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	0692      	lsls	r2, r2, #26
 8002ff2:	d42d      	bmi.n	8003050 <_printf_common+0xb4>
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d020      	beq.n	8003044 <_printf_common+0xa8>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	68e5      	ldr	r5, [r4, #12]
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf18      	it	ne
 800300e:	2500      	movne	r5, #0
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	f04f 0600 	mov.w	r6, #0
 8003016:	68a3      	ldr	r3, [r4, #8]
 8003018:	bf08      	it	eq
 800301a:	1aad      	subeq	r5, r5, r2
 800301c:	6922      	ldr	r2, [r4, #16]
 800301e:	bf08      	it	eq
 8003020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003024:	4293      	cmp	r3, r2
 8003026:	bfc4      	itt	gt
 8003028:	1a9b      	subgt	r3, r3, r2
 800302a:	18ed      	addgt	r5, r5, r3
 800302c:	341a      	adds	r4, #26
 800302e:	42b5      	cmp	r5, r6
 8003030:	d11a      	bne.n	8003068 <_printf_common+0xcc>
 8003032:	2000      	movs	r0, #0
 8003034:	e008      	b.n	8003048 <_printf_common+0xac>
 8003036:	2301      	movs	r3, #1
 8003038:	4652      	mov	r2, sl
 800303a:	4649      	mov	r1, r9
 800303c:	4638      	mov	r0, r7
 800303e:	47c0      	blx	r8
 8003040:	3001      	adds	r0, #1
 8003042:	d103      	bne.n	800304c <_printf_common+0xb0>
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304c:	3501      	adds	r5, #1
 800304e:	e7c4      	b.n	8002fda <_printf_common+0x3e>
 8003050:	2030      	movs	r0, #48	; 0x30
 8003052:	18e1      	adds	r1, r4, r3
 8003054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305e:	4422      	add	r2, r4
 8003060:	3302      	adds	r3, #2
 8003062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003066:	e7c5      	b.n	8002ff4 <_printf_common+0x58>
 8003068:	2301      	movs	r3, #1
 800306a:	4622      	mov	r2, r4
 800306c:	4649      	mov	r1, r9
 800306e:	4638      	mov	r0, r7
 8003070:	47c0      	blx	r8
 8003072:	3001      	adds	r0, #1
 8003074:	d0e6      	beq.n	8003044 <_printf_common+0xa8>
 8003076:	3601      	adds	r6, #1
 8003078:	e7d9      	b.n	800302e <_printf_common+0x92>
	...

0800307c <_printf_i>:
 800307c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	460c      	mov	r4, r1
 8003082:	7e27      	ldrb	r7, [r4, #24]
 8003084:	4691      	mov	r9, r2
 8003086:	2f78      	cmp	r7, #120	; 0x78
 8003088:	4680      	mov	r8, r0
 800308a:	469a      	mov	sl, r3
 800308c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800308e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003092:	d807      	bhi.n	80030a4 <_printf_i+0x28>
 8003094:	2f62      	cmp	r7, #98	; 0x62
 8003096:	d80a      	bhi.n	80030ae <_printf_i+0x32>
 8003098:	2f00      	cmp	r7, #0
 800309a:	f000 80d9 	beq.w	8003250 <_printf_i+0x1d4>
 800309e:	2f58      	cmp	r7, #88	; 0x58
 80030a0:	f000 80a4 	beq.w	80031ec <_printf_i+0x170>
 80030a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030ac:	e03a      	b.n	8003124 <_printf_i+0xa8>
 80030ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030b2:	2b15      	cmp	r3, #21
 80030b4:	d8f6      	bhi.n	80030a4 <_printf_i+0x28>
 80030b6:	a001      	add	r0, pc, #4	; (adr r0, 80030bc <_printf_i+0x40>)
 80030b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003129 	.word	0x08003129
 80030c4:	080030a5 	.word	0x080030a5
 80030c8:	080030a5 	.word	0x080030a5
 80030cc:	080030a5 	.word	0x080030a5
 80030d0:	080030a5 	.word	0x080030a5
 80030d4:	08003129 	.word	0x08003129
 80030d8:	080030a5 	.word	0x080030a5
 80030dc:	080030a5 	.word	0x080030a5
 80030e0:	080030a5 	.word	0x080030a5
 80030e4:	080030a5 	.word	0x080030a5
 80030e8:	08003237 	.word	0x08003237
 80030ec:	08003159 	.word	0x08003159
 80030f0:	08003219 	.word	0x08003219
 80030f4:	080030a5 	.word	0x080030a5
 80030f8:	080030a5 	.word	0x080030a5
 80030fc:	08003259 	.word	0x08003259
 8003100:	080030a5 	.word	0x080030a5
 8003104:	08003159 	.word	0x08003159
 8003108:	080030a5 	.word	0x080030a5
 800310c:	080030a5 	.word	0x080030a5
 8003110:	08003221 	.word	0x08003221
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	600a      	str	r2, [r1, #0]
 8003120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003124:	2301      	movs	r3, #1
 8003126:	e0a4      	b.n	8003272 <_printf_i+0x1f6>
 8003128:	6825      	ldr	r5, [r4, #0]
 800312a:	6808      	ldr	r0, [r1, #0]
 800312c:	062e      	lsls	r6, r5, #24
 800312e:	f100 0304 	add.w	r3, r0, #4
 8003132:	d50a      	bpl.n	800314a <_printf_i+0xce>
 8003134:	6805      	ldr	r5, [r0, #0]
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	2d00      	cmp	r5, #0
 800313a:	da03      	bge.n	8003144 <_printf_i+0xc8>
 800313c:	232d      	movs	r3, #45	; 0x2d
 800313e:	426d      	negs	r5, r5
 8003140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003144:	230a      	movs	r3, #10
 8003146:	485e      	ldr	r0, [pc, #376]	; (80032c0 <_printf_i+0x244>)
 8003148:	e019      	b.n	800317e <_printf_i+0x102>
 800314a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800314e:	6805      	ldr	r5, [r0, #0]
 8003150:	600b      	str	r3, [r1, #0]
 8003152:	bf18      	it	ne
 8003154:	b22d      	sxthne	r5, r5
 8003156:	e7ef      	b.n	8003138 <_printf_i+0xbc>
 8003158:	680b      	ldr	r3, [r1, #0]
 800315a:	6825      	ldr	r5, [r4, #0]
 800315c:	1d18      	adds	r0, r3, #4
 800315e:	6008      	str	r0, [r1, #0]
 8003160:	0628      	lsls	r0, r5, #24
 8003162:	d501      	bpl.n	8003168 <_printf_i+0xec>
 8003164:	681d      	ldr	r5, [r3, #0]
 8003166:	e002      	b.n	800316e <_printf_i+0xf2>
 8003168:	0669      	lsls	r1, r5, #25
 800316a:	d5fb      	bpl.n	8003164 <_printf_i+0xe8>
 800316c:	881d      	ldrh	r5, [r3, #0]
 800316e:	2f6f      	cmp	r7, #111	; 0x6f
 8003170:	bf0c      	ite	eq
 8003172:	2308      	moveq	r3, #8
 8003174:	230a      	movne	r3, #10
 8003176:	4852      	ldr	r0, [pc, #328]	; (80032c0 <_printf_i+0x244>)
 8003178:	2100      	movs	r1, #0
 800317a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317e:	6866      	ldr	r6, [r4, #4]
 8003180:	2e00      	cmp	r6, #0
 8003182:	bfa8      	it	ge
 8003184:	6821      	ldrge	r1, [r4, #0]
 8003186:	60a6      	str	r6, [r4, #8]
 8003188:	bfa4      	itt	ge
 800318a:	f021 0104 	bicge.w	r1, r1, #4
 800318e:	6021      	strge	r1, [r4, #0]
 8003190:	b90d      	cbnz	r5, 8003196 <_printf_i+0x11a>
 8003192:	2e00      	cmp	r6, #0
 8003194:	d04d      	beq.n	8003232 <_printf_i+0x1b6>
 8003196:	4616      	mov	r6, r2
 8003198:	fbb5 f1f3 	udiv	r1, r5, r3
 800319c:	fb03 5711 	mls	r7, r3, r1, r5
 80031a0:	5dc7      	ldrb	r7, [r0, r7]
 80031a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031a6:	462f      	mov	r7, r5
 80031a8:	42bb      	cmp	r3, r7
 80031aa:	460d      	mov	r5, r1
 80031ac:	d9f4      	bls.n	8003198 <_printf_i+0x11c>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d10b      	bne.n	80031ca <_printf_i+0x14e>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	07df      	lsls	r7, r3, #31
 80031b6:	d508      	bpl.n	80031ca <_printf_i+0x14e>
 80031b8:	6923      	ldr	r3, [r4, #16]
 80031ba:	6861      	ldr	r1, [r4, #4]
 80031bc:	4299      	cmp	r1, r3
 80031be:	bfde      	ittt	le
 80031c0:	2330      	movle	r3, #48	; 0x30
 80031c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031ca:	1b92      	subs	r2, r2, r6
 80031cc:	6122      	str	r2, [r4, #16]
 80031ce:	464b      	mov	r3, r9
 80031d0:	4621      	mov	r1, r4
 80031d2:	4640      	mov	r0, r8
 80031d4:	f8cd a000 	str.w	sl, [sp]
 80031d8:	aa03      	add	r2, sp, #12
 80031da:	f7ff fedf 	bl	8002f9c <_printf_common>
 80031de:	3001      	adds	r0, #1
 80031e0:	d14c      	bne.n	800327c <_printf_i+0x200>
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	b004      	add	sp, #16
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	4834      	ldr	r0, [pc, #208]	; (80032c0 <_printf_i+0x244>)
 80031ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031f2:	680e      	ldr	r6, [r1, #0]
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80031fa:	061f      	lsls	r7, r3, #24
 80031fc:	600e      	str	r6, [r1, #0]
 80031fe:	d514      	bpl.n	800322a <_printf_i+0x1ae>
 8003200:	07d9      	lsls	r1, r3, #31
 8003202:	bf44      	itt	mi
 8003204:	f043 0320 	orrmi.w	r3, r3, #32
 8003208:	6023      	strmi	r3, [r4, #0]
 800320a:	b91d      	cbnz	r5, 8003214 <_printf_i+0x198>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	f023 0320 	bic.w	r3, r3, #32
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	2310      	movs	r3, #16
 8003216:	e7af      	b.n	8003178 <_printf_i+0xfc>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f043 0320 	orr.w	r3, r3, #32
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	2378      	movs	r3, #120	; 0x78
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <_printf_i+0x248>)
 8003224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003228:	e7e3      	b.n	80031f2 <_printf_i+0x176>
 800322a:	065e      	lsls	r6, r3, #25
 800322c:	bf48      	it	mi
 800322e:	b2ad      	uxthmi	r5, r5
 8003230:	e7e6      	b.n	8003200 <_printf_i+0x184>
 8003232:	4616      	mov	r6, r2
 8003234:	e7bb      	b.n	80031ae <_printf_i+0x132>
 8003236:	680b      	ldr	r3, [r1, #0]
 8003238:	6826      	ldr	r6, [r4, #0]
 800323a:	1d1d      	adds	r5, r3, #4
 800323c:	6960      	ldr	r0, [r4, #20]
 800323e:	600d      	str	r5, [r1, #0]
 8003240:	0635      	lsls	r5, r6, #24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	d501      	bpl.n	800324a <_printf_i+0x1ce>
 8003246:	6018      	str	r0, [r3, #0]
 8003248:	e002      	b.n	8003250 <_printf_i+0x1d4>
 800324a:	0671      	lsls	r1, r6, #25
 800324c:	d5fb      	bpl.n	8003246 <_printf_i+0x1ca>
 800324e:	8018      	strh	r0, [r3, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	4616      	mov	r6, r2
 8003254:	6123      	str	r3, [r4, #16]
 8003256:	e7ba      	b.n	80031ce <_printf_i+0x152>
 8003258:	680b      	ldr	r3, [r1, #0]
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	600a      	str	r2, [r1, #0]
 800325e:	681e      	ldr	r6, [r3, #0]
 8003260:	2100      	movs	r1, #0
 8003262:	4630      	mov	r0, r6
 8003264:	6862      	ldr	r2, [r4, #4]
 8003266:	f000 f82f 	bl	80032c8 <memchr>
 800326a:	b108      	cbz	r0, 8003270 <_printf_i+0x1f4>
 800326c:	1b80      	subs	r0, r0, r6
 800326e:	6060      	str	r0, [r4, #4]
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800327a:	e7a8      	b.n	80031ce <_printf_i+0x152>
 800327c:	4632      	mov	r2, r6
 800327e:	4649      	mov	r1, r9
 8003280:	4640      	mov	r0, r8
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d0ab      	beq.n	80031e2 <_printf_i+0x166>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	079b      	lsls	r3, r3, #30
 800328e:	d413      	bmi.n	80032b8 <_printf_i+0x23c>
 8003290:	68e0      	ldr	r0, [r4, #12]
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	4298      	cmp	r0, r3
 8003296:	bfb8      	it	lt
 8003298:	4618      	movlt	r0, r3
 800329a:	e7a4      	b.n	80031e6 <_printf_i+0x16a>
 800329c:	2301      	movs	r3, #1
 800329e:	4632      	mov	r2, r6
 80032a0:	4649      	mov	r1, r9
 80032a2:	4640      	mov	r0, r8
 80032a4:	47d0      	blx	sl
 80032a6:	3001      	adds	r0, #1
 80032a8:	d09b      	beq.n	80031e2 <_printf_i+0x166>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	9903      	ldr	r1, [sp, #12]
 80032b0:	1a5b      	subs	r3, r3, r1
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	dcf2      	bgt.n	800329c <_printf_i+0x220>
 80032b6:	e7eb      	b.n	8003290 <_printf_i+0x214>
 80032b8:	2500      	movs	r5, #0
 80032ba:	f104 0619 	add.w	r6, r4, #25
 80032be:	e7f5      	b.n	80032ac <_printf_i+0x230>
 80032c0:	08003591 	.word	0x08003591
 80032c4:	080035a2 	.word	0x080035a2

080032c8 <memchr>:
 80032c8:	4603      	mov	r3, r0
 80032ca:	b510      	push	{r4, lr}
 80032cc:	b2c9      	uxtb	r1, r1
 80032ce:	4402      	add	r2, r0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	d101      	bne.n	80032da <memchr+0x12>
 80032d6:	2000      	movs	r0, #0
 80032d8:	e003      	b.n	80032e2 <memchr+0x1a>
 80032da:	7804      	ldrb	r4, [r0, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	428c      	cmp	r4, r1
 80032e0:	d1f6      	bne.n	80032d0 <memchr+0x8>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <memcpy>:
 80032e4:	440a      	add	r2, r1
 80032e6:	4291      	cmp	r1, r2
 80032e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032ec:	d100      	bne.n	80032f0 <memcpy+0xc>
 80032ee:	4770      	bx	lr
 80032f0:	b510      	push	{r4, lr}
 80032f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032fc:	d1f9      	bne.n	80032f2 <memcpy+0xe>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <memmove>:
 8003300:	4288      	cmp	r0, r1
 8003302:	b510      	push	{r4, lr}
 8003304:	eb01 0402 	add.w	r4, r1, r2
 8003308:	d902      	bls.n	8003310 <memmove+0x10>
 800330a:	4284      	cmp	r4, r0
 800330c:	4623      	mov	r3, r4
 800330e:	d807      	bhi.n	8003320 <memmove+0x20>
 8003310:	1e43      	subs	r3, r0, #1
 8003312:	42a1      	cmp	r1, r4
 8003314:	d008      	beq.n	8003328 <memmove+0x28>
 8003316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800331a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800331e:	e7f8      	b.n	8003312 <memmove+0x12>
 8003320:	4601      	mov	r1, r0
 8003322:	4402      	add	r2, r0
 8003324:	428a      	cmp	r2, r1
 8003326:	d100      	bne.n	800332a <memmove+0x2a>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800332e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003332:	e7f7      	b.n	8003324 <memmove+0x24>

08003334 <_free_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4605      	mov	r5, r0
 8003338:	2900      	cmp	r1, #0
 800333a:	d043      	beq.n	80033c4 <_free_r+0x90>
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f0c      	subs	r4, r1, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfb8      	it	lt
 8003346:	18e4      	addlt	r4, r4, r3
 8003348:	f000 f8d0 	bl	80034ec <__malloc_lock>
 800334c:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <_free_r+0x94>)
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	4610      	mov	r0, r2
 8003352:	b933      	cbnz	r3, 8003362 <_free_r+0x2e>
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	6014      	str	r4, [r2, #0]
 8003358:	4628      	mov	r0, r5
 800335a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335e:	f000 b8cb 	b.w	80034f8 <__malloc_unlock>
 8003362:	42a3      	cmp	r3, r4
 8003364:	d90a      	bls.n	800337c <_free_r+0x48>
 8003366:	6821      	ldr	r1, [r4, #0]
 8003368:	1862      	adds	r2, r4, r1
 800336a:	4293      	cmp	r3, r2
 800336c:	bf01      	itttt	eq
 800336e:	681a      	ldreq	r2, [r3, #0]
 8003370:	685b      	ldreq	r3, [r3, #4]
 8003372:	1852      	addeq	r2, r2, r1
 8003374:	6022      	streq	r2, [r4, #0]
 8003376:	6063      	str	r3, [r4, #4]
 8003378:	6004      	str	r4, [r0, #0]
 800337a:	e7ed      	b.n	8003358 <_free_r+0x24>
 800337c:	461a      	mov	r2, r3
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	b10b      	cbz	r3, 8003386 <_free_r+0x52>
 8003382:	42a3      	cmp	r3, r4
 8003384:	d9fa      	bls.n	800337c <_free_r+0x48>
 8003386:	6811      	ldr	r1, [r2, #0]
 8003388:	1850      	adds	r0, r2, r1
 800338a:	42a0      	cmp	r0, r4
 800338c:	d10b      	bne.n	80033a6 <_free_r+0x72>
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	4401      	add	r1, r0
 8003392:	1850      	adds	r0, r2, r1
 8003394:	4283      	cmp	r3, r0
 8003396:	6011      	str	r1, [r2, #0]
 8003398:	d1de      	bne.n	8003358 <_free_r+0x24>
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4401      	add	r1, r0
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	6053      	str	r3, [r2, #4]
 80033a4:	e7d8      	b.n	8003358 <_free_r+0x24>
 80033a6:	d902      	bls.n	80033ae <_free_r+0x7a>
 80033a8:	230c      	movs	r3, #12
 80033aa:	602b      	str	r3, [r5, #0]
 80033ac:	e7d4      	b.n	8003358 <_free_r+0x24>
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	1821      	adds	r1, r4, r0
 80033b2:	428b      	cmp	r3, r1
 80033b4:	bf01      	itttt	eq
 80033b6:	6819      	ldreq	r1, [r3, #0]
 80033b8:	685b      	ldreq	r3, [r3, #4]
 80033ba:	1809      	addeq	r1, r1, r0
 80033bc:	6021      	streq	r1, [r4, #0]
 80033be:	6063      	str	r3, [r4, #4]
 80033c0:	6054      	str	r4, [r2, #4]
 80033c2:	e7c9      	b.n	8003358 <_free_r+0x24>
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	200000c4 	.word	0x200000c4

080033cc <_malloc_r>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	1ccd      	adds	r5, r1, #3
 80033d0:	f025 0503 	bic.w	r5, r5, #3
 80033d4:	3508      	adds	r5, #8
 80033d6:	2d0c      	cmp	r5, #12
 80033d8:	bf38      	it	cc
 80033da:	250c      	movcc	r5, #12
 80033dc:	2d00      	cmp	r5, #0
 80033de:	4606      	mov	r6, r0
 80033e0:	db01      	blt.n	80033e6 <_malloc_r+0x1a>
 80033e2:	42a9      	cmp	r1, r5
 80033e4:	d903      	bls.n	80033ee <_malloc_r+0x22>
 80033e6:	230c      	movs	r3, #12
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	2000      	movs	r0, #0
 80033ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ee:	f000 f87d 	bl	80034ec <__malloc_lock>
 80033f2:	4921      	ldr	r1, [pc, #132]	; (8003478 <_malloc_r+0xac>)
 80033f4:	680a      	ldr	r2, [r1, #0]
 80033f6:	4614      	mov	r4, r2
 80033f8:	b99c      	cbnz	r4, 8003422 <_malloc_r+0x56>
 80033fa:	4f20      	ldr	r7, [pc, #128]	; (800347c <_malloc_r+0xb0>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b923      	cbnz	r3, 800340a <_malloc_r+0x3e>
 8003400:	4621      	mov	r1, r4
 8003402:	4630      	mov	r0, r6
 8003404:	f000 f862 	bl	80034cc <_sbrk_r>
 8003408:	6038      	str	r0, [r7, #0]
 800340a:	4629      	mov	r1, r5
 800340c:	4630      	mov	r0, r6
 800340e:	f000 f85d 	bl	80034cc <_sbrk_r>
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	d123      	bne.n	800345e <_malloc_r+0x92>
 8003416:	230c      	movs	r3, #12
 8003418:	4630      	mov	r0, r6
 800341a:	6033      	str	r3, [r6, #0]
 800341c:	f000 f86c 	bl	80034f8 <__malloc_unlock>
 8003420:	e7e3      	b.n	80033ea <_malloc_r+0x1e>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	1b5b      	subs	r3, r3, r5
 8003426:	d417      	bmi.n	8003458 <_malloc_r+0x8c>
 8003428:	2b0b      	cmp	r3, #11
 800342a:	d903      	bls.n	8003434 <_malloc_r+0x68>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	441c      	add	r4, r3
 8003430:	6025      	str	r5, [r4, #0]
 8003432:	e004      	b.n	800343e <_malloc_r+0x72>
 8003434:	6863      	ldr	r3, [r4, #4]
 8003436:	42a2      	cmp	r2, r4
 8003438:	bf0c      	ite	eq
 800343a:	600b      	streq	r3, [r1, #0]
 800343c:	6053      	strne	r3, [r2, #4]
 800343e:	4630      	mov	r0, r6
 8003440:	f000 f85a 	bl	80034f8 <__malloc_unlock>
 8003444:	f104 000b 	add.w	r0, r4, #11
 8003448:	1d23      	adds	r3, r4, #4
 800344a:	f020 0007 	bic.w	r0, r0, #7
 800344e:	1ac2      	subs	r2, r0, r3
 8003450:	d0cc      	beq.n	80033ec <_malloc_r+0x20>
 8003452:	1a1b      	subs	r3, r3, r0
 8003454:	50a3      	str	r3, [r4, r2]
 8003456:	e7c9      	b.n	80033ec <_malloc_r+0x20>
 8003458:	4622      	mov	r2, r4
 800345a:	6864      	ldr	r4, [r4, #4]
 800345c:	e7cc      	b.n	80033f8 <_malloc_r+0x2c>
 800345e:	1cc4      	adds	r4, r0, #3
 8003460:	f024 0403 	bic.w	r4, r4, #3
 8003464:	42a0      	cmp	r0, r4
 8003466:	d0e3      	beq.n	8003430 <_malloc_r+0x64>
 8003468:	1a21      	subs	r1, r4, r0
 800346a:	4630      	mov	r0, r6
 800346c:	f000 f82e 	bl	80034cc <_sbrk_r>
 8003470:	3001      	adds	r0, #1
 8003472:	d1dd      	bne.n	8003430 <_malloc_r+0x64>
 8003474:	e7cf      	b.n	8003416 <_malloc_r+0x4a>
 8003476:	bf00      	nop
 8003478:	200000c4 	.word	0x200000c4
 800347c:	200000c8 	.word	0x200000c8

08003480 <_realloc_r>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4607      	mov	r7, r0
 8003484:	4614      	mov	r4, r2
 8003486:	460e      	mov	r6, r1
 8003488:	b921      	cbnz	r1, 8003494 <_realloc_r+0x14>
 800348a:	4611      	mov	r1, r2
 800348c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003490:	f7ff bf9c 	b.w	80033cc <_malloc_r>
 8003494:	b922      	cbnz	r2, 80034a0 <_realloc_r+0x20>
 8003496:	f7ff ff4d 	bl	8003334 <_free_r>
 800349a:	4625      	mov	r5, r4
 800349c:	4628      	mov	r0, r5
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a0:	f000 f830 	bl	8003504 <_malloc_usable_size_r>
 80034a4:	42a0      	cmp	r0, r4
 80034a6:	d20f      	bcs.n	80034c8 <_realloc_r+0x48>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4638      	mov	r0, r7
 80034ac:	f7ff ff8e 	bl	80033cc <_malloc_r>
 80034b0:	4605      	mov	r5, r0
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d0f2      	beq.n	800349c <_realloc_r+0x1c>
 80034b6:	4631      	mov	r1, r6
 80034b8:	4622      	mov	r2, r4
 80034ba:	f7ff ff13 	bl	80032e4 <memcpy>
 80034be:	4631      	mov	r1, r6
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7ff ff37 	bl	8003334 <_free_r>
 80034c6:	e7e9      	b.n	800349c <_realloc_r+0x1c>
 80034c8:	4635      	mov	r5, r6
 80034ca:	e7e7      	b.n	800349c <_realloc_r+0x1c>

080034cc <_sbrk_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	2300      	movs	r3, #0
 80034d0:	4d05      	ldr	r5, [pc, #20]	; (80034e8 <_sbrk_r+0x1c>)
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	f7fd fa62 	bl	80009a0 <_sbrk>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_sbrk_r+0x1a>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_sbrk_r+0x1a>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	20000174 	.word	0x20000174

080034ec <__malloc_lock>:
 80034ec:	4801      	ldr	r0, [pc, #4]	; (80034f4 <__malloc_lock+0x8>)
 80034ee:	f000 b811 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80034f2:	bf00      	nop
 80034f4:	2000017c 	.word	0x2000017c

080034f8 <__malloc_unlock>:
 80034f8:	4801      	ldr	r0, [pc, #4]	; (8003500 <__malloc_unlock+0x8>)
 80034fa:	f000 b80c 	b.w	8003516 <__retarget_lock_release_recursive>
 80034fe:	bf00      	nop
 8003500:	2000017c 	.word	0x2000017c

08003504 <_malloc_usable_size_r>:
 8003504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003508:	1f18      	subs	r0, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bfbc      	itt	lt
 800350e:	580b      	ldrlt	r3, [r1, r0]
 8003510:	18c0      	addlt	r0, r0, r3
 8003512:	4770      	bx	lr

08003514 <__retarget_lock_acquire_recursive>:
 8003514:	4770      	bx	lr

08003516 <__retarget_lock_release_recursive>:
 8003516:	4770      	bx	lr

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
