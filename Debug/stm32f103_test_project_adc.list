
stm32f103_test_project_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba4  08002ba4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ba4  08002ba4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ba4  08002ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08002bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002bb8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cc8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfc  00000000  00000000  00028cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a8b  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af71  00000000  00000000  000433d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008738d  00000000  00000000  0004e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d56d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e68  00000000  00000000  000d5724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b4c 	.word	0x08002b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b4c 	.word	0x08002b4c

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b5d      	ldr	r3, [pc, #372]	; (80002d4 <MX_ADC1_Init+0x188>)
 800015e:	4a5e      	ldr	r2, [pc, #376]	; (80002d8 <MX_ADC1_Init+0x18c>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b5c      	ldr	r3, [pc, #368]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b5a      	ldr	r3, [pc, #360]	; (80002d4 <MX_ADC1_Init+0x188>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b58      	ldr	r3, [pc, #352]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b57      	ldr	r3, [pc, #348]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b55      	ldr	r3, [pc, #340]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 11;
 8000184:	4b53      	ldr	r3, [pc, #332]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000186:	220b      	movs	r2, #11
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4852      	ldr	r0, [pc, #328]	; (80002d4 <MX_ADC1_Init+0x188>)
 800018c:	f000 fcc0 	bl	8000b10 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fb25 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a2:	2307      	movs	r3, #7
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	484a      	ldr	r0, [pc, #296]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001ac:	f001 f848 	bl	8001240 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fb15 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4843      	ldr	r0, [pc, #268]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001c8:	f001 f83a 	bl	8001240 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fb07 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d6:	2302      	movs	r3, #2
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	483c      	ldr	r0, [pc, #240]	; (80002d4 <MX_ADC1_Init+0x188>)
 80001e4:	f001 f82c 	bl	8001240 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 faf9 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4835      	ldr	r0, [pc, #212]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000200:	f001 f81e 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 faeb 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000212:	2305      	movs	r3, #5
 8000214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	482e      	ldr	r0, [pc, #184]	; (80002d4 <MX_ADC1_Init+0x188>)
 800021c:	f001 f810 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000226:	f000 fadd 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800022a:	2305      	movs	r3, #5
 800022c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800022e:	2306      	movs	r3, #6
 8000230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4827      	ldr	r0, [pc, #156]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000238:	f001 f802 	bl	8001240 <HAL_ADC_ConfigChannel>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000242:	f000 facf 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000246:	2306      	movs	r3, #6
 8000248:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800024a:	2307      	movs	r3, #7
 800024c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4619      	mov	r1, r3
 8000252:	4820      	ldr	r0, [pc, #128]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000254:	f000 fff4 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800025e:	f000 fac1 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000262:	2307      	movs	r3, #7
 8000264:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000266:	2308      	movs	r3, #8
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4819      	ldr	r0, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x188>)
 8000270:	f000 ffe6 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800027a:	f000 fab3 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800027e:	2309      	movs	r3, #9
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000282:	2309      	movs	r3, #9
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	4812      	ldr	r0, [pc, #72]	; (80002d4 <MX_ADC1_Init+0x188>)
 800028c:	f000 ffd8 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000296:	f000 faa5 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800029a:	230a      	movs	r3, #10
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	480c      	ldr	r0, [pc, #48]	; (80002d4 <MX_ADC1_Init+0x188>)
 80002a4:	f000 ffcc 	bl	8001240 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80002ae:	f000 fa99 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80002b2:	230b      	movs	r3, #11
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC1_Init+0x188>)
 80002bc:	f000 ffc0 	bl	8001240 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 80002c6:	f000 fa8d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000098 	.word	0x20000098
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_ADC2_Init+0xb0>)
 80002ee:	4a28      	ldr	r2, [pc, #160]	; (8000390 <MX_ADC2_Init+0xb4>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <MX_ADC2_Init+0xb0>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_ADC2_Init+0xb0>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <MX_ADC2_Init+0xb0>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_ADC2_Init+0xb0>)
 8000308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <MX_ADC2_Init+0xb0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MX_ADC2_Init+0xb0>)
 8000316:	2203      	movs	r2, #3
 8000318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800031a:	481c      	ldr	r0, [pc, #112]	; (800038c <MX_ADC2_Init+0xb0>)
 800031c:	f000 fbf8 	bl	8000b10 <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000326:	f000 fa5d 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800032a:	2306      	movs	r3, #6
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000332:	2307      	movs	r3, #7
 8000334:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <MX_ADC2_Init+0xb0>)
 800033c:	f000 ff80 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 fa4d 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800034a:	2308      	movs	r3, #8
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034e:	2302      	movs	r3, #2
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <MX_ADC2_Init+0xb0>)
 8000358:	f000 ff72 	bl	8001240 <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000362:	f000 fa3f 	bl	80007e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000366:	2306      	movs	r3, #6
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800036a:	2303      	movs	r3, #3
 800036c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_ADC2_Init+0xb0>)
 8000374:	f000 ff64 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 fa31 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000068 	.word	0x20000068
 8000390:	40012800 	.word	0x40012800

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0320 	add.w	r3, r7, #32
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a46      	ldr	r2, [pc, #280]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d140      	bne.n	8000436 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003b4:	4b45      	ldr	r3, [pc, #276]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a44      	ldr	r2, [pc, #272]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b42      	ldr	r3, [pc, #264]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c8:	61fb      	str	r3, [r7, #28]
 80003ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	61bb      	str	r3, [r7, #24]
 80003e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b39      	ldr	r3, [pc, #228]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a38      	ldr	r2, [pc, #224]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <HAL_ADC_MspInit+0x138>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697b      	ldr	r3, [r7, #20]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003fc:	23ff      	movs	r3, #255	; 0xff
 80003fe:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	2303      	movs	r3, #3
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	4619      	mov	r1, r3
 800040a:	4831      	ldr	r0, [pc, #196]	; (80004d0 <HAL_ADC_MspInit+0x13c>)
 800040c:	f001 fa70 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000410:	2302      	movs	r3, #2
 8000412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000414:	2303      	movs	r3, #3
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	4619      	mov	r1, r3
 800041e:	482d      	ldr	r0, [pc, #180]	; (80004d4 <HAL_ADC_MspInit+0x140>)
 8000420:	f001 fa66 	bl	80018f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2100      	movs	r1, #0
 8000428:	2012      	movs	r0, #18
 800042a:	f001 fa2a 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800042e:	2012      	movs	r0, #18
 8000430:	f001 fa43 	bl	80018ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000434:	e044      	b.n	80004c0 <HAL_ADC_MspInit+0x12c>
  else if(adcHandle->Instance==ADC2)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <HAL_ADC_MspInit+0x144>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d13f      	bne.n	80004c0 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a15      	ldr	r2, [pc, #84]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <HAL_ADC_MspInit+0x138>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048c:	2303      	movs	r3, #3
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0320 	add.w	r3, r7, #32
 8000494:	4619      	mov	r1, r3
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <HAL_ADC_MspInit+0x13c>)
 8000498:	f001 fa2a 	bl	80018f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0320 	add.w	r3, r7, #32
 80004a8:	4619      	mov	r1, r3
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <HAL_ADC_MspInit+0x140>)
 80004ac:	f001 fa20 	bl	80018f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2012      	movs	r0, #18
 80004b6:	f001 f9e4 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004ba:	2012      	movs	r0, #18
 80004bc:	f001 f9fd 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	; 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012400 	.word	0x40012400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40012800 	.word	0x40012800

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	; (800056c <MX_GPIO_Init+0x90>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_GPIO_Init+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_GPIO_Init+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_GPIO_Init+0x90>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_GPIO_Init+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_GPIO_Init+0x90>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_GPIO_Init+0x94>)
 8000540:	f001 fb5a 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_GPIO_Init+0x94>)
 800055e:	f001 f9c7 	bl	80018f0 <HAL_GPIO_Init>

}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000

08000574 <HAL_ADC_ConvCpltCallback>:
uint32_t final_buffer[11] = {0};
uint32_t adc_2_result[4] = {0};

uint8_t adc_ready = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	adc_ready = 1;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_ADC_ConvCpltCallback+0x18>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000064 	.word	0x20000064

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fa35 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f88f 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f7ff ff9d 	bl	80004dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a2:	f7ff fdd3 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 f991 	bl	80008cc <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80005aa:	f7ff fe97 	bl	80002dc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <main+0x10c>)
 80005b0:	f000 ffda 	bl	8001568 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <main+0x110>)
 80005b6:	f000 ffd7 	bl	8001568 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fa84 	bl	8000ac8 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t*) "Hello", 6, 150);
 80005c0:	2396      	movs	r3, #150	; 0x96
 80005c2:	2206      	movs	r2, #6
 80005c4:	4937      	ldr	r1, [pc, #220]	; (80006a4 <main+0x114>)
 80005c6:	4838      	ldr	r0, [pc, #224]	; (80006a8 <main+0x118>)
 80005c8:	f002 f929 	bl	800281e <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(uint8_t mode = 0; mode < 2; mode++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	e057      	b.n	8000682 <main+0xf2>
		  adc_ready = 0;
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <main+0x11c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
		  if(mode == 0) HAL_ADC_Start_IT(&hadc1);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <main+0x56>
 80005de:	482f      	ldr	r0, [pc, #188]	; (800069c <main+0x10c>)
 80005e0:	f000 fca0 	bl	8000f24 <HAL_ADC_Start_IT>
 80005e4:	e002      	b.n	80005ec <main+0x5c>
		  else 			HAL_ADC_Start_IT(&hadc2);
 80005e6:	482e      	ldr	r0, [pc, #184]	; (80006a0 <main+0x110>)
 80005e8:	f000 fc9c 	bl	8000f24 <HAL_ADC_Start_IT>

		  if(mode == 0){
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d116      	bne.n	8000620 <main+0x90>
			  for(uint8_t i = 0; i < 11; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	e00f      	b.n	8000618 <main+0x88>
			  {
				HAL_ADC_PollForConversion(&hadc1, 100);
 80005f8:	2164      	movs	r1, #100	; 0x64
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0x10c>)
 80005fc:	f000 fb8c 	bl	8000d18 <HAL_ADC_PollForConversion>
				adc_result[i] = HAL_ADC_GetValue(&hadc1);
 8000600:	79bc      	ldrb	r4, [r7, #6]
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <main+0x10c>)
 8000604:	f000 fd44 	bl	8001090 <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <main+0x120>)
 800060c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

				asm("NOP");
 8000610:	bf00      	nop
			  for(uint8_t i = 0; i < 11; i++)
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	3301      	adds	r3, #1
 8000616:	71bb      	strb	r3, [r7, #6]
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d9ec      	bls.n	80005f8 <main+0x68>
 800061e:	e01a      	b.n	8000656 <main+0xc6>
			  }
		  }
		  else {
			for(uint8_t i = 0; i < 4; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	717b      	strb	r3, [r7, #5]
 8000624:	e00e      	b.n	8000644 <main+0xb4>
				HAL_ADC_PollForConversion(&hadc2, 100);
 8000626:	2164      	movs	r1, #100	; 0x64
 8000628:	481d      	ldr	r0, [pc, #116]	; (80006a0 <main+0x110>)
 800062a:	f000 fb75 	bl	8000d18 <HAL_ADC_PollForConversion>
				adc_2_result[i] = HAL_ADC_GetValue(&hadc2);
 800062e:	797c      	ldrb	r4, [r7, #5]
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0x110>)
 8000632:	f000 fd2d 	bl	8001090 <HAL_ADC_GetValue>
 8000636:	4603      	mov	r3, r0
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <main+0x124>)
 800063a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t i = 0; i < 4; i++){
 800063e:	797b      	ldrb	r3, [r7, #5]
 8000640:	3301      	adds	r3, #1
 8000642:	717b      	strb	r3, [r7, #5]
 8000644:	797b      	ldrb	r3, [r7, #5]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d9ed      	bls.n	8000626 <main+0x96>
			}
		  }

		  while(!adc_ready){
 800064a:	e004      	b.n	8000656 <main+0xc6>
			  int z = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
			  z = z+1;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	603b      	str	r3, [r7, #0]
		  while(!adc_ready){
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0x11c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f6      	beq.n	800064c <main+0xbc>
		  }

		  if(mode == 0) HAL_ADC_Stop(&hadc1);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <main+0xdc>
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <main+0x10c>)
 8000666:	f000 fb2b 	bl	8000cc0 <HAL_ADC_Stop>
 800066a:	e002      	b.n	8000672 <main+0xe2>
		  else 		    HAL_ADC_Stop(&hadc2);
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <main+0x110>)
 800066e:	f000 fb27 	bl	8000cc0 <HAL_ADC_Stop>

		  move_numbers(&adc_result[0], mode);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4619      	mov	r1, r3
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <main+0x120>)
 8000678:	f000 f878 	bl	800076c <move_numbers>
	  for(uint8_t mode = 0; mode < 2; mode++){
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	3301      	adds	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d9a4      	bls.n	80005d2 <main+0x42>
	  }

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <main+0x128>)
 800068e:	f001 facb 	bl	8001c28 <HAL_GPIO_TogglePin>
//		  sprintf((char*) str, "ADC%d: %d\t", i, (uint8_t*) adc_result[i]);
//		  HAL_UART_Transmit(&huart1, str, 20, 100);
//		  for(int index = 0; index < 20; index++){ str[index] = 0;}
//	  }
//	  HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 2, 100);
	  HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f000 fa18 	bl	8000ac8 <HAL_Delay>
	  for(uint8_t mode = 0; mode < 2; mode++){
 8000698:	e798      	b.n	80005cc <main+0x3c>
 800069a:	bf00      	nop
 800069c:	20000098 	.word	0x20000098
 80006a0:	20000068 	.word	0x20000068
 80006a4:	08002b64 	.word	0x08002b64
 80006a8:	200000f4 	.word	0x200000f4
 80006ac:	20000064 	.word	0x20000064
 80006b0:	200000c8 	.word	0x200000c8
 80006b4:	20000054 	.word	0x20000054
 80006b8:	40011000 	.word	0x40011000

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2228      	movs	r2, #40	; 0x28
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fa36 	bl	8002b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000700:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4618      	mov	r0, r3
 800070c:	f001 faa6 	bl	8001c5c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000716:	f000 f865 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fd10 	bl	800215c <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000742:	f000 f84f 	bl	80007e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fe9c 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 f841 	bl	80007e4 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <move_numbers>:

/* USER CODE BEGIN 4 */

void move_numbers(uint32_t *numbers, uint8_t mode){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]

	//final_buffer[0] = adc_result[3];

	if(mode == 0){
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d120      	bne.n	80007c0 <move_numbers+0x54>
		final_buffer[0] = numbers[6];
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <move_numbers+0x70>)
 8000784:	6013      	str	r3, [r2, #0]
		final_buffer[1] = numbers[3];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <move_numbers+0x70>)
 800078c:	6053      	str	r3, [r2, #4]
		final_buffer[2] = numbers[0];
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <move_numbers+0x70>)
 8000794:	6093      	str	r3, [r2, #8]
		final_buffer[3] = numbers[10];
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <move_numbers+0x70>)
 800079c:	60d3      	str	r3, [r2, #12]
		final_buffer[4] = numbers[4];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <move_numbers+0x70>)
 80007a4:	6113      	str	r3, [r2, #16]
		final_buffer[5] = numbers[1];
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <move_numbers+0x70>)
 80007ac:	6153      	str	r3, [r2, #20]
		final_buffer[7] = numbers[8];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a1b      	ldr	r3, [r3, #32]
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <move_numbers+0x70>)
 80007b4:	61d3      	str	r3, [r2, #28]
		final_buffer[9] = numbers[2];
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <move_numbers+0x70>)
 80007bc:	6253      	str	r3, [r2, #36]	; 0x24
//	buffer[4] = numbers[5];
//	buffer[5] = numbers[2];
//	buffer[7] = numbers[6];
//
//	*numbers = &buffer[0];
}
 80007be:	e007      	b.n	80007d0 <move_numbers+0x64>
		final_buffer[6] = adc_2_result[0];
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <move_numbers+0x74>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <move_numbers+0x70>)
 80007c6:	6193      	str	r3, [r2, #24]
		final_buffer[8] = adc_2_result[1];
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <move_numbers+0x74>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <move_numbers+0x70>)
 80007ce:	6213      	str	r3, [r2, #32]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	20000054 	.word	0x20000054

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_MspInit+0x5c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x5c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_MspInit+0x60>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_MspInit+0x60>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f8f9 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <ADC1_2_IRQHandler+0x14>)
 80008aa:	f000 fbfd 	bl	80010a8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <ADC1_2_IRQHandler+0x18>)
 80008b0:	f000 fbfa 	bl	80010a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000098 	.word	0x20000098
 80008bc:	20000068 	.word	0x20000068

080008c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART1_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART1_UART_Init+0x4c>)
 8000904:	f001 ff3e 	bl	8002784 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f7ff ff69 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000f4 	.word	0x200000f4
 800091c:	40013800 	.word	0x40013800

08000920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x8c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d131      	bne.n	80009a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000986:	f000 ffb3 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x94>)
 80009a0:	f000 ffa6 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009de:	f7ff ff6f 	bl	80008c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f002 f887 	bl	8002af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fdd3 	bl	8000590 <main>
  bx lr
 80009ea:	4770      	bx	lr
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f4:	08002bac 	.word	0x08002bac
  ldr r2, =_sbss
 80009f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009fc:	2000013c 	.word	0x2000013c

08000a00 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <CAN1_RX1_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 ff29 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fee6 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 ff41 	bl	80018d6 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 ff09 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000138 	.word	0x20000138

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000138 	.word	0x20000138

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0be      	b.n	8000cb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fc20 	bl	8000394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 fcc5 	bl	80014e4 <ADC_ConversionStop_Disable>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8099 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8095 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b7c:	f023 0302 	bic.w	r3, r3, #2
 8000b80:	f043 0202 	orr.w	r2, r3, #2
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7b1b      	ldrb	r3, [r3, #12]
 8000b96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_Init+0xa2>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d102      	bne.n	8000bb8 <HAL_ADC_Init+0xa8>
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	e000      	b.n	8000bba <HAL_ADC_Init+0xaa>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7d1b      	ldrb	r3, [r3, #20]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d119      	bne.n	8000bfc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7b1b      	ldrb	r3, [r3, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	035a      	lsls	r2, r3, #13
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e00b      	b.n	8000bfc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f043 0220 	orr.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_ADC_Init+0x1a8>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c2c:	d003      	beq.n	8000c36 <HAL_ADC_Init+0x126>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	051b      	lsls	r3, r3, #20
 8000c3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_ADC_Init+0x1ac>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d10b      	bne.n	8000c7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c7a:	e018      	b.n	8000cae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f023 0312 	bic.w	r3, r3, #18
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	f043 0201 	orr.w	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9c:	e007      	b.n	8000cae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cbc:	ff1f0efe 	.word	0xff1f0efe

08000cc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Stop+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e01a      	b.n	8000d10 <HAL_ADC_Stop+0x50>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 fbfe 	bl	80014e4 <ADC_ConversionStop_Disable>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d2e:	f7ff fec1 	bl	8000ab4 <HAL_GetTick>
 8000d32:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f043 0220 	orr.w	r2, r3, #32
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0d3      	b.n	8000f02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d131      	bne.n	8000dcc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d12a      	bne.n	8000dcc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d76:	e021      	b.n	8000dbc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7e:	d01d      	beq.n	8000dbc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <HAL_ADC_PollForConversion+0x7e>
 8000d86:	f7ff fe95 	bl	8000ab4 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d212      	bcs.n	8000dbc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10b      	bne.n	8000dbc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f043 0204 	orr.w	r2, r3, #4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e0a2      	b.n	8000f02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0d6      	beq.n	8000d78 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dca:	e070      	b.n	8000eae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_ADC_PollForConversion+0x1f4>)
 8000dce:	681c      	ldr	r4, [r3, #0]
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f001 fc13 	bl	80025fc <HAL_RCCEx_GetPeriphCLKFreq>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6919      	ldr	r1, [r3, #16]
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <HAL_ADC_PollForConversion+0x1f8>)
 8000de4:	400b      	ands	r3, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d118      	bne.n	8000e1c <HAL_ADC_PollForConversion+0x104>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68d9      	ldr	r1, [r3, #12]
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_ADC_PollForConversion+0x1fc>)
 8000df2:	400b      	ands	r3, r1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d111      	bne.n	8000e1c <HAL_ADC_PollForConversion+0x104>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6919      	ldr	r1, [r3, #16]
 8000dfe:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_ADC_PollForConversion+0x200>)
 8000e00:	400b      	ands	r3, r1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d108      	bne.n	8000e18 <HAL_ADC_PollForConversion+0x100>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68d9      	ldr	r1, [r3, #12]
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <HAL_ADC_PollForConversion+0x204>)
 8000e0e:	400b      	ands	r3, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_PollForConversion+0x100>
 8000e14:	2314      	movs	r3, #20
 8000e16:	e020      	b.n	8000e5a <HAL_ADC_PollForConversion+0x142>
 8000e18:	2329      	movs	r3, #41	; 0x29
 8000e1a:	e01e      	b.n	8000e5a <HAL_ADC_PollForConversion+0x142>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6919      	ldr	r1, [r3, #16]
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <HAL_ADC_PollForConversion+0x200>)
 8000e24:	400b      	ands	r3, r1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_ADC_PollForConversion+0x120>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68d9      	ldr	r1, [r3, #12]
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <HAL_ADC_PollForConversion+0x204>)
 8000e32:	400b      	ands	r3, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00d      	beq.n	8000e54 <HAL_ADC_PollForConversion+0x13c>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6919      	ldr	r1, [r3, #16]
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_ADC_PollForConversion+0x208>)
 8000e40:	400b      	ands	r3, r1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d108      	bne.n	8000e58 <HAL_ADC_PollForConversion+0x140>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68d9      	ldr	r1, [r3, #12]
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_ADC_PollForConversion+0x208>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_PollForConversion+0x140>
 8000e54:	2354      	movs	r3, #84	; 0x54
 8000e56:	e000      	b.n	8000e5a <HAL_ADC_PollForConversion+0x142>
 8000e58:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e60:	e021      	b.n	8000ea6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d01a      	beq.n	8000ea0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <HAL_ADC_PollForConversion+0x168>
 8000e70:	f7ff fe20 	bl	8000ab4 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d20f      	bcs.n	8000ea0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d90b      	bls.n	8000ea0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f043 0204 	orr.w	r2, r3, #4
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e030      	b.n	8000f02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d8d9      	bhi.n	8000e62 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f06f 0212 	mvn.w	r2, #18
 8000eb6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ece:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed2:	d115      	bne.n	8000f00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d111      	bne.n	8000f00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d105      	bne.n	8000f00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	24924924 	.word	0x24924924
 8000f14:	00924924 	.word	0x00924924
 8000f18:	12492492 	.word	0x12492492
 8000f1c:	00492492 	.word	0x00492492
 8000f20:	00249249 	.word	0x00249249

08000f24 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Start_IT+0x1a>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e0a0      	b.n	8001080 <HAL_ADC_Start_IT+0x15c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fa72 	bl	8001430 <ADC_Enable>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 808f 	bne.w	8001076 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_ADC_Start_IT+0x164>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_Start_IT+0x5e>
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_ADC_Start_IT+0x168>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d115      	bne.n	8000fae <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d026      	beq.n	8000fea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fac:	e01d      	b.n	8000fea <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <HAL_ADC_Start_IT+0x168>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d004      	beq.n	8000fce <HAL_ADC_Start_IT+0xaa>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_ADC_Start_IT+0x164>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_ADC_Start_IT+0xc6>
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_ADC_Start_IT+0x168>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f023 0206 	bic.w	r2, r3, #6
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
 8001002:	e002      	b.n	800100a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f06f 0202 	mvn.w	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001036:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800103a:	d113      	bne.n	8001064 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_ADC_Start_IT+0x164>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d105      	bne.n	8001052 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_ADC_Start_IT+0x168>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800104e:	2b00      	cmp	r3, #0
 8001050:	d108      	bne.n	8001064 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	e00c      	b.n	800107e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e003      	b.n	800107e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40012800 	.word	0x40012800
 800108c:	40012400 	.word	0x40012400

08001090 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d140      	bne.n	8001140 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d139      	bne.n	8001140 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010f2:	d11d      	bne.n	8001130 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d119      	bne.n	8001130 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0220 	bic.w	r2, r2, #32
 800110a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fa1f 	bl	8000574 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f06f 0212 	mvn.w	r2, #18
 800113e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	2b80      	cmp	r3, #128	; 0x80
 800114c:	d14f      	bne.n	80011ee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b04      	cmp	r3, #4
 800115a:	d148      	bne.n	80011ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800117e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001182:	d012      	beq.n	80011aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800118e:	2b00      	cmp	r3, #0
 8001190:	d125      	bne.n	80011de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800119c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011a0:	d11d      	bne.n	80011de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fa6e 	bl	80016c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f06f 020c 	mvn.w	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d114      	bne.n	8001226 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d10d      	bne.n	8001226 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f809 	bl	800122e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f06f 0201 	mvn.w	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x20>
 800125c:	2302      	movs	r3, #2
 800125e:	e0dc      	b.n	800141a <HAL_ADC_ConfigChannel+0x1da>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d81c      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b05      	subs	r3, #5
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
 80012a8:	e03c      	b.n	8001324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	d81c      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b23      	subs	r3, #35	; 0x23
 80012c4:	221f      	movs	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4019      	ands	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b23      	subs	r3, #35	; 0x23
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
 80012ea:	e01b      	b.n	8001324 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3b41      	subs	r3, #65	; 0x41
 80012fe:	221f      	movs	r2, #31
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b41      	subs	r3, #65	; 0x41
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d91c      	bls.n	8001366 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b1e      	subs	r3, #30
 800133e:	2207      	movs	r2, #7
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	4019      	ands	r1, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6898      	ldr	r0, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	3b1e      	subs	r3, #30
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e019      	b.n	800139a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6919      	ldr	r1, [r3, #16]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	2207      	movs	r2, #7
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	4019      	ands	r1, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6898      	ldr	r0, [r3, #8]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	fa00 f203 	lsl.w	r2, r0, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d132      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_ADC_ConfigChannel+0x1e4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d125      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d126      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d11a      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_ADC_ConfigChannel+0x1e8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_ADC_ConfigChannel+0x1ec>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x1b2>
 80013fe:	e007      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f043 0220 	orr.w	r2, r3, #32
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40012400 	.word	0x40012400
 8001428:	20000000 	.word	0x20000000
 800142c:	431bde83 	.word	0x431bde83

08001430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d040      	beq.n	80014d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <ADC_Enable+0xac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1f      	ldr	r2, [pc, #124]	; (80014e0 <ADC_Enable+0xb0>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800146c:	e002      	b.n	8001474 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3b01      	subs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800147a:	f7ff fb1b 	bl	8000ab4 <HAL_GetTick>
 800147e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001480:	e01f      	b.n	80014c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001482:	f7ff fb17 	bl	8000ab4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d918      	bls.n	80014c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d011      	beq.n	80014c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e007      	b.n	80014d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d1d8      	bne.n	8001482 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12e      	bne.n	800155c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800150e:	f7ff fad1 	bl	8000ab4 <HAL_GetTick>
 8001512:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001514:	e01b      	b.n	800154e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001516:	f7ff facd 	bl	8000ab4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d914      	bls.n	800154e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10d      	bne.n	800154e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e007      	b.n	800155e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d0dc      	beq.n	8001516 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_ADCEx_Calibration_Start+0x1e>
 8001582:	2302      	movs	r3, #2
 8001584:	e095      	b.n	80016b2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa8 	bl	80014e4 <ADC_ConversionStop_Disable>
 8001594:	4603      	mov	r3, r0
 8001596:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8084 	bne.w	80016a8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015a8:	f023 0302 	bic.w	r3, r3, #2
 80015ac:	f043 0202 	orr.w	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015b4:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_ADCEx_Calibration_Start+0x154>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 f81f 	bl	80025fc <HAL_RCCEx_GetPeriphCLKFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80015c4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80015c6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80015c8:	e002      	b.n	80015d0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff2a 	bl	8001430 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015ec:	f7ff fa62 	bl	8000ab4 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015f2:	e01b      	b.n	800162c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015f4:	f7ff fa5e 	bl	8000ab4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d914      	bls.n	800162c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f023 0312 	bic.w	r3, r3, #18
 8001618:	f043 0210 	orr.w	r2, r3, #16
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e042      	b.n	80016b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1dc      	bne.n	80015f4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0204 	orr.w	r2, r2, #4
 8001648:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800164a:	f7ff fa33 	bl	8000ab4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001650:	e01b      	b.n	800168a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001652:	f7ff fa2f 	bl	8000ab4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b0a      	cmp	r3, #10
 800165e:	d914      	bls.n	800168a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f023 0312 	bic.w	r3, r3, #18
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e013      	b.n	80016b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1dc      	bne.n	8001652 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e169      	b.n	8001bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8158 	bne.w	8001bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a9a      	ldr	r2, [pc, #616]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4a98      	ldr	r2, [pc, #608]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a94      	ldr	r2, [pc, #592]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a92      	ldr	r2, [pc, #584]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a90      	ldr	r2, [pc, #576]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_GPIO_Init+0x2b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80b1 	beq.w	8001bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1ec>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4928      	ldr	r1, [pc, #160]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e021      	b.n	8001bd2 <HAL_GPIO_Init+0x2e2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
 8001bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f ae8e 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	611a      	str	r2, [r3, #16]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43d9      	mvns	r1, r3
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e26c      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8087 	beq.w	8001d8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d00c      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c88:	4b8f      	ldr	r3, [pc, #572]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d112      	bne.n	8001cba <HAL_RCC_OscConfig+0x5e>
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d06c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x12c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d168      	bne.n	8001d88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e246      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x76>
 8001cc4:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a7f      	ldr	r2, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e02e      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e01d      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0xbc>
 8001cfe:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a71      	ldr	r2, [pc, #452]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001d18:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a67      	ldr	r2, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe febc 	bl	8000ab4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7fe feb8 	bl	8000ab4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1fa      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe4>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fea8 	bl	8000ab4 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe fea4 	bl	8000ab4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1e6      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x10c>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001da2:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x18c>
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x176>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1ba      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4939      	ldr	r1, [pc, #228]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	e03a      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fe5d 	bl	8000ab4 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fe59 	bl	8000ab4 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e19b      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fe3c 	bl	8000ab4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7fe fe38 	bl	8000ab4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e17a      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03a      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7fe fe1c 	bl	8000ab4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7fe fe18 	bl	8000ab4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e15a      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 fad8 	bl	8002454 <RCC_Delay>
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7fe fe02 	bl	8000ab4 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fdfe 	bl	8000ab4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d908      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e140      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	42420000 	.word	0x42420000
 8001ed0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b9e      	ldr	r3, [pc, #632]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e9      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a6 	beq.w	800203a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b97      	ldr	r3, [pc, #604]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10d      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b94      	ldr	r3, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a93      	ldr	r2, [pc, #588]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fdbf 	bl	8000ab4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe fdbb 	bl	8000ab4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0fd      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x312>
 8001f60:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a7a      	ldr	r2, [pc, #488]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e02d      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x334>
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a72      	ldr	r2, [pc, #456]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	e01c      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d10c      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x356>
 8001f98:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a69      	ldr	r2, [pc, #420]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	e00b      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b64      	ldr	r3, [pc, #400]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a63      	ldr	r2, [pc, #396]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d015      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fd6f 	bl	8000ab4 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fd6b 	bl	8000ab4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0ab      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	4b57      	ldr	r3, [pc, #348]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ee      	beq.n	8001fda <HAL_RCC_OscConfig+0x37e>
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7fe fd59 	bl	8000ab4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe fd55 	bl	8000ab4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e095      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b48      	ldr	r3, [pc, #288]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8081 	beq.w	8002146 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002044:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d061      	beq.n	8002114 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d146      	bne.n	80020e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fd29 	bl	8000ab4 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fd25 	bl	8000ab4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e067      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d108      	bne.n	80020a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	492d      	ldr	r1, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a19      	ldr	r1, [r3, #32]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	430b      	orrs	r3, r1
 80020b2:	4927      	ldr	r1, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fcf9 	bl	8000ab4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe fcf5 	bl	8000ab4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e037      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46a>
 80020e4:	e02f      	b.n	8002146 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe fce2 	bl	8000ab4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fcde 	bl	8000ab4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e020      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x498>
 8002112:	e018      	b.n	8002146 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420060 	.word	0x42420060

0800215c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d0      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4965      	ldr	r1, [pc, #404]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	494d      	ldr	r1, [pc, #308]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d040      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e073      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06b      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4936      	ldr	r1, [pc, #216]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fc32 	bl	8000ab4 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fc2e 	bl	8000ab4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e053      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d210      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e032      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4916      	ldr	r1, [pc, #88]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490a      	ldr	r1, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1cc>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fb90 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40022000 	.word	0x40022000
 8002320:	40021000 	.word	0x40021000
 8002324:	08002b8c 	.word	0x08002b8c
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b490      	push	{r4, r7}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002338:	1d3c      	adds	r4, r7, #4
 800233a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800233c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002340:	f240 2301 	movw	r3, #513	; 0x201
 8002344:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x40>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x46>
 800236e:	e02d      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002372:	623b      	str	r3, [r7, #32]
      break;
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	0c9b      	lsrs	r3, r3, #18
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002382:	4413      	add	r3, r2
 8002384:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002388:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c5b      	lsrs	r3, r3, #17
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023a2:	4413      	add	r3, r2
 80023a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ae:	fb02 f203 	mul.w	r2, r2, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	e004      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	623b      	str	r3, [r7, #32]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ce:	623b      	str	r3, [r7, #32]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	6a3b      	ldr	r3, [r7, #32]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc90      	pop	{r4, r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	08002b6c 	.word	0x08002b6c
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff2 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08002b9c 	.word	0x08002b9c

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffde 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0adb      	lsrs	r3, r3, #11
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	08002b9c 	.word	0x08002b9c

08002454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <RCC_Delay+0x34>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <RCC_Delay+0x38>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002470:	bf00      	nop
  }
  while (Delay --);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <RCC_Delay+0x1c>
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000000 	.word	0x20000000
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d07d      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b0:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	61d3      	str	r3, [r2, #28]
 80024c8:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d118      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a42      	ldr	r2, [pc, #264]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f0:	f7fe fae0 	bl	8000ab4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	e008      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f8:	f7fe fadc 	bl	8000ab4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e06d      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d02e      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d027      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800254a:	4a29      	ldr	r2, [pc, #164]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d014      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe faab 	bl	8000ab4 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe faa7 	bl	8000ab4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e036      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4917      	ldr	r1, [pc, #92]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002592:	4313      	orrs	r3, r2
 8002594:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	490b      	ldr	r1, [pc, #44]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420440 	.word	0x42420440

080025fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08d      	sub	sp, #52	; 0x34
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002606:	f107 040c 	add.w	r4, r7, #12
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002610:	f240 2301 	movw	r3, #513	; 0x201
 8002614:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b10      	cmp	r3, #16
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b10      	cmp	r3, #16
 8002634:	f200 8091 	bhi.w	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d04c      	beq.n	80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d07c      	beq.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002644:	e089      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800264c:	4b49      	ldr	r3, [pc, #292]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8082 	beq.w	800275e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002698:	4a37      	ldr	r2, [pc, #220]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a8:	e004      	b.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c0:	d102      	bne.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026c6:	e04a      	b.n	800275e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026d6:	e042      	b.n	800275e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e8:	d108      	bne.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80026f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	e01f      	b.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d109      	bne.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002714:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 800271a:	e00f      	b.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002726:	d11c      	bne.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002734:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800273a:	e012      	b.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800273c:	e011      	b.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800273e:	f7ff fe75 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0b9b      	lsrs	r3, r3, #14
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002762:	bf00      	nop
    }
  }
  return (frequency);
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002766:	4618      	mov	r0, r3
 8002768:	3734      	adds	r7, #52	; 0x34
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	08002b7c 	.word	0x08002b7c
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200
 800277c:	003d0900 	.word	0x003d0900
 8002780:	aaaaaaab 	.word	0xaaaaaaab

08002784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e03f      	b.n	8002816 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f8b8 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f905 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	; 0x28
 8002822:	af02      	add	r7, sp, #8
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d17c      	bne.n	8002938 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_UART_Transmit+0x2c>
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e075      	b.n	800293a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x3e>
 8002858:	2302      	movs	r3, #2
 800285a:	e06e      	b.n	800293a <HAL_UART_Transmit+0x11c>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002872:	f7fe f91f 	bl	8000ab4 <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288c:	d108      	bne.n	80028a0 <HAL_UART_Transmit+0x82>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e003      	b.n	80028a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028b0:	e02a      	b.n	8002908 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f840 	bl	8002942 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e036      	b.n	800293a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3302      	adds	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	e007      	b.n	80028fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1cf      	bne.n	80028b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	2140      	movs	r1, #64	; 0x40
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f810 	bl	8002942 <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e006      	b.n	800293a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002952:	e02c      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d028      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <UART_WaitOnFlagUntilTimeout+0x30>
 8002962:	f7fe f8a7 	bl	8000ab4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	429a      	cmp	r2, r3
 8002970:	d21d      	bcs.n	80029ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002980:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e00f      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d0c3      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <UART_SetConfig+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff fcf4 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff fcdc 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <UART_SetConfig+0x118>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	0119      	lsls	r1, r3, #4
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <UART_SetConfig+0x118>)
 8002a86:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4419      	add	r1, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <UART_SetConfig+0x118>)
 8002abe:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	51eb851f 	.word	0x51eb851f

08002af4 <__libc_init_array>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	2600      	movs	r6, #0
 8002af8:	4d0c      	ldr	r5, [pc, #48]	; (8002b2c <__libc_init_array+0x38>)
 8002afa:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <__libc_init_array+0x3c>)
 8002afc:	1b64      	subs	r4, r4, r5
 8002afe:	10a4      	asrs	r4, r4, #2
 8002b00:	42a6      	cmp	r6, r4
 8002b02:	d109      	bne.n	8002b18 <__libc_init_array+0x24>
 8002b04:	f000 f822 	bl	8002b4c <_init>
 8002b08:	2600      	movs	r6, #0
 8002b0a:	4d0a      	ldr	r5, [pc, #40]	; (8002b34 <__libc_init_array+0x40>)
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	; (8002b38 <__libc_init_array+0x44>)
 8002b0e:	1b64      	subs	r4, r4, r5
 8002b10:	10a4      	asrs	r4, r4, #2
 8002b12:	42a6      	cmp	r6, r4
 8002b14:	d105      	bne.n	8002b22 <__libc_init_array+0x2e>
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1c:	4798      	blx	r3
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7ee      	b.n	8002b00 <__libc_init_array+0xc>
 8002b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b26:	4798      	blx	r3
 8002b28:	3601      	adds	r6, #1
 8002b2a:	e7f2      	b.n	8002b12 <__libc_init_array+0x1e>
 8002b2c:	08002ba4 	.word	0x08002ba4
 8002b30:	08002ba4 	.word	0x08002ba4
 8002b34:	08002ba4 	.word	0x08002ba4
 8002b38:	08002ba8 	.word	0x08002ba8

08002b3c <memset>:
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4402      	add	r2, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <_init>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr

08002b58 <_fini>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr
